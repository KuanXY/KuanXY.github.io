<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Opengrok（Docker）搭建源码阅读环境</title>
    <url>/2023/04/14/Opnegrok%EF%BC%88Docker%EF%BC%89%E6%90%AD%E5%BB%BA%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<hr>
<p>本文基于docker容器的Opengrok，快速搭建源码阅读环境。</p>
<span id="more"></span>

<p>Opengrok的github：</p>
<p><a href="https://github.com/oracle/opengrok/blob/master/docker/README.md">opengrok/README.md at master · oracle/opengrok (github.com)</a></p>
<p>Opengrok的Docker Hub：</p>
<p><a href="https://hub.docker.com/r/opengrok/docker">opengrok/docker - Docker Image | Docker Hub</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name opengrok \</span><br><span class="line">    -p <span class="number">12306</span>:<span class="number">8080</span>/tcp \</span><br><span class="line">    -e SYNC_PERIOD_MINUTES=<span class="string">&quot;60&quot;</span> \</span><br><span class="line">    -v /home/zhguan/src:/opengrok/src/ \</span><br><span class="line">    -v /home/zhguan/etc:/opengrok/etc/ \</span><br><span class="line">    -v /home/zhguan/data:/opengrok/data/ \</span><br><span class="line">    opengrok/docker:latest</span><br></pre></td></tr></table></figure>

<ul>
<li><p>命令行解释：</p>
<ul>
<li>-d：后台运行    </li>
<li>-v：将宿主机的某个目录挂载到容器内的目录，这里是将某个目录挂载到<code>/opengrok/src</code></li>
<li>-p：将宿主机的12306端口映射到容器的8080端口</li>
<li>-e：设置环境变量，SYNC_PERIOD_MINUTES是索引的更新周期，这里设置半小时更新一次</li>
</ul>
</li>
<li><p>查看搭建情况（chatgpt生成）：</p>
</li>
</ul>
<p>可以使用以下步骤在Ubuntu上查看本地网页内容：</p>
<ol>
<li><p>打开您的网页，例如 <a href="http://localhost:8080/">http://localhost:8080</a>。</p>
</li>
<li><p>然后打开终端。</p>
</li>
<li><p>使用 curl 命令来获取该网页的内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080</span><br></pre></td></tr></table></figure></li>
<li><p>终端将输出该网页的 HTML 内容。如果您的网页使用其他类型的内容（如 JSON 或 XML），则可以添加参数 -H “Content-Type: application/json” 或 -H “Content-Type: application/xml” 来相应地指定内容类型。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application/json&quot; http://localhost:8080</span><br></pre></td></tr></table></figure></li>
<li><p>如果您想将输出保存到文件中，可以使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080 &gt; output.html</span><br></pre></td></tr></table></figure>

<p>这将把网页的内容保存到名为 output.html 的文件中。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>源码阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>Fabric2.0链码启动和初始化</title>
    <url>/2023/04/13/Fabric-chaincode-analysis-01/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>本文参考《区块链——原理、设计与应用》p186、p369、p419及Fabric源码撰写</p>
</blockquote>
<p>本文主要分析Fabric链码启动与初始化流程。<span id="more"></span></p>
<h1 id="peer节点与链码间的关系"><a href="#peer节点与链码间的关系" class="headerlink" title="peer节点与链码间的关系"></a>peer节点与链码间的关系</h1><p>peer节点应运行着peer进程，peer节点可以是物理机、虚拟机或docker容器，只要其内运行着peer的服务程序即可，peer进程类似于一个服务器进程（Server）,当我们使用peer命令执行相关操作时，会自动与peer进程进行通信，执行相关操作（例如调用链码）</p>
<p>而链码则是必须要求运行在docker容器内部（2.0版本后支持外部链码），通过grpc协议与peer节点进行通信。从2.0版本开始支持新的面向通道的链码生命周期管理。</p>
<p>peer节点最重要的配置文件时core.yaml文件。</p>
<h1 id="链码启动与初始化"><a href="#链码启动与初始化" class="headerlink" title="链码启动与初始化"></a>链码启动与初始化</h1><p><a href="http://116.63.138.80:8080/xref/core/endorser/support.go#114">/core/endorser/support.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行初始化部署方案并返回链码响应</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SupportImpl)</span></span> ExecuteLegacyInit(txParams *ccprovider.TransactionParams, name, version <span class="type">string</span>, input *pb.ChaincodeInput) (*pb.Response, *pb.ChaincodeEvent, <span class="type">error</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> s.ChaincodeSupport.ExecuteLegacyInit(txParams, name, version, input)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="D:\CS\markdown\Pictures\链码初始化流程.png" alt="链码初始化流程" style="zoom: 7%;" />

<h2 id="ExecuteLegacyInit"><a href="#ExecuteLegacyInit" class="headerlink" title="ExecuteLegacyInit"></a>ExecuteLegacyInit</h2><p><a href="http://116.63.138.80:8080/xref/core/chaincode/chaincode_support.go#143">/core/chaincode/chaincode_support.go</a></p>
<p>可以看到该函数中制定了ccid = 链码名+版本号。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ExecuteLegacyInit是一个临时方法，一旦旧样式的生命周期被完全否决，就应该删除它。理想情况下，在引入新的生命周期之后发布一个版本。它不尝试基于生命周期中的信息启动链代码，而是直接接受ChaincodeDeploymentSpec形式的容器信息。*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *ChaincodeSupport)</span></span> ExecuteLegacyInit(txParams *ccprovider.TransactionParams, ccName, ccVersion <span class="type">string</span>, input *pb.ChaincodeInput) (*pb.Response, *pb.ChaincodeEvent, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">/*FIXME：这是一个Hacker，我们不应该手动构建ccid，而是让生命周期为我们构建它。然而，这是将消失的遗留代码，因此目前可以接受（FAB-14627）*/</span></span><br><span class="line">	ccid := ccName + <span class="string">&quot;:&quot;</span> + ccVersion</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//若链码未实例化，则先启动并等待完成</span></span><br><span class="line">	h, err := cs.Launch(ccid)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//链码完成初始化：发送INIT消息给启动的链码容器</span></span><br><span class="line">	resp, err := cs.execute(pb.ChaincodeMessage_INIT, txParams, ccName, input, h)</span><br><span class="line">    <span class="comment">//返回执行结果</span></span><br><span class="line">	<span class="keyword">return</span> processChaincodeExecutionResult(txParams.TxID, ccName, resp, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面函数的第7行通过<a href="#cs.Launch(ccid)">cs.Launch</a>启动链码（容器），然后通过第12行的<a href="#execute">cs.execute</a>初始化链码。</p>
<p><strong>ChaincodeSupport结构体</strong></p>
<p><a href="http://116.63.138.80:8080/xref/core/chaincode/chaincode_support.go#60">/core/chaincode/chaincode_support.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ChaincodeSupport负责提供与peer链码的接口。</span></span><br><span class="line"><span class="keyword">type</span> ChaincodeSupport <span class="keyword">struct</span> &#123;</span><br><span class="line">	ACLProvider            ACLProvider</span><br><span class="line">	AppConfig              ApplicationConfigRetriever</span><br><span class="line">	BuiltinSCCs            scc.BuiltinSCCs</span><br><span class="line">	DeployedCCInfoProvider ledger.DeployedChaincodeInfoProvider</span><br><span class="line">	ExecuteTimeout         time.Duration</span><br><span class="line">	InstallTimeout         time.Duration</span><br><span class="line">	HandlerMetrics         *HandlerMetrics</span><br><span class="line">	HandlerRegistry        *HandlerRegistry</span><br><span class="line">	Keepalive              time.Duration</span><br><span class="line">	Launcher               Launcher</span><br><span class="line">	Lifecycle              Lifecycle</span><br><span class="line">	Peer                   *peer.Peer</span><br><span class="line">	Runtime                Runtime</span><br><span class="line">	TotalQueryLimit        <span class="type">int</span></span><br><span class="line">	UserRunsCC             <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编译链码"><a href="#编译链码" class="headerlink" title="编译链码"></a>编译链码</h2><h3 id="cs-Launch-ccid"><a href="#cs-Launch-ccid" class="headerlink" title="cs.Launch(ccid)"></a>cs.Launch(ccid)</h3><p><a href="http://116.63.138.80:8080/xref/core/chaincode/chaincode_support.go#81">/core/chaincode/chaincode_support.go</a></p>
<p>Launch代码通过第六行的<code>cs.Launcher.Launch(ccid, cs)</code>启动链码。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *ChaincodeSupport)</span></span> Launch(ccid <span class="type">string</span>) (*Handler, <span class="type">error</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> h := cs.HandlerRegistry.Handler(ccid); h != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> h, <span class="literal">nil</span></span><br><span class="line">   &#125;</span><br><span class="line">	<span class="comment">//创建并启动链码，核心过程</span></span><br><span class="line">   <span class="keyword">if</span> err := cs.Launcher.Launch(ccid, cs); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(err, <span class="string">&quot;could not launch chaincode %s&quot;</span>, ccid)</span><br><span class="line">   &#125;</span><br><span class="line">	<span class="comment">//添加链码处理句柄</span></span><br><span class="line">   h := cs.HandlerRegistry.Handler(ccid)</span><br><span class="line">   <span class="keyword">if</span> h == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, errors.Errorf(<span class="string">&quot;claimed to start chaincode container for %s but could not find handler&quot;</span>, ccid)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> h, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Launch"><a href="#Launch" class="headerlink" title="Launch"></a>Launch</h3><p><a href="http://116.63.138.80:8080/xref/core/chaincode/runtime_launcher.go#70">/core/chaincode/runtime_launcher.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RuntimeLauncher)</span></span> Launch(ccid <span class="type">string</span>, streamHandler extcc.StreamHandler) <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> startFailCh <span class="keyword">chan</span> <span class="type">error</span></span><br><span class="line">	<span class="keyword">var</span> timeoutCh &lt;-<span class="keyword">chan</span> time.Time</span><br><span class="line"></span><br><span class="line">	startTime := time.Now()</span><br><span class="line">    <span class="comment">//判断链码是否已经启动</span></span><br><span class="line">	launchState, alreadyStarted := r.Registry.Launching(ccid)</span><br><span class="line">    <span class="comment">//=================如果没有启动则使用go routine启动链码容器=================================</span></span><br><span class="line">	<span class="keyword">if</span> !alreadyStarted &#123;</span><br><span class="line">		startFailCh = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">error</span>, <span class="number">1</span>)</span><br><span class="line">		timeoutCh = time.NewTimer(r.StartupTimeout).C</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//启动一个go routine并编译并启动链码容器</span></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="comment">// 完成构建过程以获得一致性信息</span></span><br><span class="line">			ccservinfo, err := r.Runtime.Build(ccid)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 指示的链码服务器型号...继续连接到CC</span></span><br><span class="line">			<span class="keyword">if</span> ccservinfo != <span class="literal">nil</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 默认peer-server模型...计算CC回调的连接信息</span></span><br><span class="line">			<span class="comment">// 并继续启动链代码</span></span><br><span class="line">			ccinfo, err := r.ChaincodeClientInfo(ccid) <span class="comment">//原生链码，计算链码连接信息</span></span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;&#125;</span><br><span class="line">			<span class="keyword">if</span> ccinfo == <span class="literal">nil</span> &#123;&#125;</span><br><span class="line">            <span class="comment">//尝试创建链码容器，并启动它</span></span><br><span class="line">			<span class="keyword">if</span> err = r.Runtime.Start(ccid, ccinfo); err != <span class="literal">nil</span> &#123;&#125;</span><br><span class="line">            <span class="comment">//等待链码编译后完成</span></span><br><span class="line">			exitCode, err := r.Runtime.Wait(ccid)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;&#125;</span><br><span class="line">			launchState.Notify(errors.Errorf(<span class="string">&quot;container exited with %d&quot;</span>, exitCode))</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//=========================================================================================</span></span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	<span class="keyword">select</span> &#123; <span class="comment">//等待启动后的返回状态</span></span><br><span class="line">	<span class="keyword">case</span> &lt;-launchState.Done(): <span class="comment">//启动后未完成注册</span></span><br><span class="line">	<span class="keyword">case</span> err = &lt;-startFailCh: <span class="comment">//启动失败</span></span><br><span class="line">	<span class="keyword">case</span> &lt;-timeoutCh: <span class="comment">//启动超时</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	success := <span class="literal">true</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; !alreadyStarted &#123; <span class="comment">//启动和失败则取消链码注册信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	chaincodeLogger.Debug(<span class="string">&quot;launch complete&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中第16行的<code>r.Runtime.Build(ccid)</code>编译链码容器的镜像（下面），第28行的r.Runtime.Start(ccid, ccinfo)则创建链码容器并启动（见启动链码部分的<a href="#Start">Start</a>）。</p>
<h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><p><a href="http://116.63.138.80:8080/xref/core/container/container.go#97">/core/container/container.go</a></p>
<p>代码中先进行外部链码构造（4），再进行原生Docker容器链码(14)的构造。都是先用<code>GetChaincodePackage</code>获取链码包数据，再通过获取的数据进行Build（编译）。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> Build(ccid <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> instance Instance</span><br><span class="line">	<span class="comment">//================外部链码构造================================</span></span><br><span class="line">	<span class="keyword">if</span> r.ExternalBuilder != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">// 目前，我们从FS中检索到的包ID始终是链代码用于注册的ccid</span></span><br><span class="line">		_, mdBytes, codeStream, err := r.PackageProvider.GetChaincodePackage(ccid)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;&#125;</span><br><span class="line">		<span class="keyword">defer</span> codeStream.Close()</span><br><span class="line">		<span class="comment">//利用外部编译器对链码进行探测，如果检查是外部链码则尝试进行编译</span></span><br><span class="line">		instance, err = r.ExternalBuilder.Build(ccid, mdBytes, codeStream)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//==========================================================</span></span><br><span class="line">	<span class="comment">//=================原生Docker链码构造=========================</span></span><br><span class="line">	<span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> r.DockerBuilder == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> errors.New(<span class="string">&quot;no DockerBuilder, cannot build&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//获取原生链码包数据（元数据metadat和代码流codeStream）</span></span><br><span class="line">		metadata, _, codeStream, err := r.PackageProvider.GetChaincodePackage(ccid)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;&#125;</span><br><span class="line">		<span class="keyword">defer</span> codeStream.Close()</span><br><span class="line">		<span class="comment">//执行编译</span></span><br><span class="line">		instance, err = r.DockerBuilder.Build(ccid, metadata, codeStream)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//==========================================================</span></span><br><span class="line">	r.mutex.Lock()</span><br><span class="line">	<span class="keyword">defer</span> r.mutex.Unlock()</span><br><span class="line">	<span class="keyword">if</span> r.containers == <span class="literal">nil</span> &#123;</span><br><span class="line">		r.containers = <span class="keyword">map</span>[<span class="type">string</span>]Instance&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	r.containers[ccid] = instance</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面第23行的<code>r.DockerBuilder.Build</code>最终会调用下面的<strong>GenerateDockerBuild</strong>函数。</p>
<p>具体路径如下：</p>
<p><a href="http://116.63.138.80:8080/xref/core/container/dockercontroller/dockercontroller.go#180">/core/container/dockercontroller/dockercontroller.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Build is responsible for building an image if it does not already exist.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(vm *DockerVM)</span></span> Build(ccid <span class="type">string</span>, metadata *persistence.ChaincodePackageMetadata, codePackage io.Reader) (container.Instance, <span class="type">error</span>) &#123;</span><br><span class="line">	imageName, err := vm.GetVMNameForDocker(ccid)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// This is an awkward translation, but better here in a future dead path</span></span><br><span class="line">	<span class="comment">// than elsewhere.  The old enum types are capital, but at least as implemented</span></span><br><span class="line">	<span class="comment">// lifecycle tools seem to allow type to be set lower case.</span></span><br><span class="line">	ccType := strings.ToUpper(metadata.Type)</span><br><span class="line"></span><br><span class="line">	_, err = vm.Client.InspectImage(imageName)</span><br><span class="line">	<span class="keyword">switch</span> err &#123;</span><br><span class="line">	<span class="keyword">case</span> docker.ErrNoSuchImage:</span><br><span class="line">		dockerfileReader, err := vm.PlatformBuilder.GenerateDockerBuild(ccType, metadata.Path, codePackage)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">&quot;platform builder failed&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		err = vm.buildImage(ccid, dockerfileReader)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">&quot;docker image build failed&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">&quot;docker image inspection failed&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &amp;ContainerInstance&#123;</span><br><span class="line">		DockerVM: vm,</span><br><span class="line">		CCID:     ccid,</span><br><span class="line">		Type:     ccType,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中的第16行会调用<strong>GenerateDockerBuild</strong>函数：</p>
<h4 id="GenerateDockerBuild"><a href="#GenerateDockerBuild" class="headerlink" title="GenerateDockerBuild"></a>GenerateDockerBuild</h4><p><a href="http://116.63.138.80:8080/xref/core/chaincode/platforms/platforms.go#166">/core/chaincode/platforms/platforms.go</a></p>
<p>该函数是核心函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Registry)</span></span> GenerateDockerBuild(ccType, path <span class="type">string</span>, codePackage io.Reader, client *docker.Client) (io.Reader, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">//创建字典inputFiles，键为“Dockerfile”，值为dockerfile的二进制</span></span><br><span class="line">	inputFiles := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">byte</span>) </span><br><span class="line"></span><br><span class="line">	<span class="comment">//生成特定于我们上下文的Dockerfile</span></span><br><span class="line">	dockerFile, err := r.GenerateDockerfile(ccType)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;Failed to generate a Dockerfile: %s&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	inputFiles[<span class="string">&quot;Dockerfile&quot;</span>] = []<span class="type">byte</span>(dockerFile)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//最后，启动一个异步进程，将以上所有内容流式传输到docker构建上下文中</span></span><br><span class="line">	input, output := io.Pipe()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		gw := gzip.NewWriter(output)<span class="comment">//gw:需要操作的句柄</span></span><br><span class="line">		tw := tar.NewWriter(gw)</span><br><span class="line">		err := r.StreamDockerBuild(ccType, path, codePackage, inputFiles, tw, client)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			logger.Error(err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		tw.Close()</span><br><span class="line">		gw.Close()</span><br><span class="line">		output.CloseWithError(err)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> input, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="构造Dockerfile"><a href="#构造Dockerfile" class="headerlink" title="构造Dockerfile"></a>构造Dockerfile</h5><p>Dockerfile的生成：Dockerfile是通过GetDockerImageFromConfig函数读取默认配置(path: chaincode.golang.runtime ) 并将对应变量进行替换后生成的。</p>
<h5 id="GenerateDockerfile"><a href="#GenerateDockerfile" class="headerlink" title="GenerateDockerfile"></a>GenerateDockerfile</h5><p><a href="http://116.63.138.80:8080/xref/core/chaincode/platforms/golang/platform.go#188">/core/chaincode/platforms/golang/platform.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Platform)</span></span> GenerateDockerfile() (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> buf []<span class="type">string</span></span><br><span class="line">    <span class="comment">//chaincode.golang.runtime即配置文件下的chaincode下的golang下的runtime</span></span><br><span class="line">   buf = <span class="built_in">append</span>(buf, <span class="string">&quot;FROM &quot;</span>+util.GetDockerImageFromConfig(<span class="string">&quot;chaincode.golang.runtime&quot;</span>))</span><br><span class="line">   buf = <span class="built_in">append</span>(buf, <span class="string">&quot;ADD binpackage.tar /usr/local/bin&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> strings.Join(buf, <span class="string">&quot;\n&quot;</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="GetDockerImageFromConfig"><a href="#GetDockerImageFromConfig" class="headerlink" title="GetDockerImageFromConfig"></a>GetDockerImageFromConfig</h5><p><a href="http://116.63.138.80:8080/xref/core/chaincode/platforms/util/utils.go?fi=GetDockerImageFromConfig#174">/core/chaincode/platforms/util/utils.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetDockerImageFromConfig replaces variables in the config</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDockerImageFromConfig</span><span class="params">(path <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">   r := strings.NewReplacer(</span><br><span class="line">      <span class="string">&quot;$(ARCH)&quot;</span>, runtime.GOARCH,</span><br><span class="line">      <span class="string">&quot;$(PROJECT_VERSION)&quot;</span>, metadata.Version,</span><br><span class="line">      <span class="string">&quot;$(TWO_DIGIT_VERSION)&quot;</span>, twoDigitVersion(metadata.Version),</span><br><span class="line">      <span class="string">&quot;$(DOCKER_NS)&quot;</span>, metadata.DockerNamespace)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> r.Replace(viper.GetString(path))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面第3行通过strings.NewReplacer将4-7行的参数进行替换为配置文件里的。</p>
<h5 id="core-yaml配置文件"><a href="#core-yaml配置文件" class="headerlink" title="core.yaml配置文件"></a>core.yaml配置文件</h5><p>在core.yaml配置文件中设置，通过fabric-ccenv构造基础镜像</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">chaincode:</span></span><br><span class="line">    <span class="attr">id:</span></span><br><span class="line">        <span class="attr">path:</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">        <span class="comment"># Generic builder environment, suitable for most chaincode types</span></span><br><span class="line">    <span class="attr">builder:</span> <span class="string">$(DOCKER_NS)/fabric-ccenv:$(TWO_DIGIT_VERSION)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">pull:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">golang:</span></span><br><span class="line">        <span class="comment"># golang will never need more than baseos</span></span><br><span class="line">        <span class="attr">runtime:</span> <span class="string">$(DOCKER_NS)/fabric-baseos:$(TWO_DIGIT_VERSION)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># whether or not golang chaincode should be linked dynamically</span></span><br><span class="line">        <span class="attr">dynamicLink:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整体上，上述流程通过来启动链码，如果链码未启动，则会通过Launch函数启动，并有外部链码和原生Docker链码两种形式。我们主要关注原生Docker链码，他会通过GenerateDockerBilud函数启动Docker链码容器，启动容器的第一步是通过core.yaml配置文件生成Dockerfile，然后通过Dockerfile生成Docker镜像。</p>
<h2 id="启动链码"><a href="#启动链码" class="headerlink" title="启动链码"></a>启动链码</h2><p>启动链码的函数时的Start，是刚刚编译链码的函数<a href="#Launch">Launch</a>中的第28行函数所调用的。（这里暂不分析外部链码）具体如下：</p>
<h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><p><a href="http://116.63.138.80:8080/xref/core/container/dockercontroller/dockercontroller.go#279">/core/container/dockercontroller/dockercontroller.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Start starts a container using a previously created docker image</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(vm *DockerVM)</span></span> Start(ccid <span class="type">string</span>, ccType <span class="type">string</span>, peerConnection *ccintf.PeerConnection) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">//获取在Build中创建的链码容器镜像信息</span></span><br><span class="line">   imageName, err := vm.GetVMNameForDocker(ccid)</span><br><span class="line">    <span class="comment">//获取各种参数</span></span><br><span class="line">   containerName := vm.GetVMName(ccid)</span><br><span class="line">   args, err := vm.GetArgs(ccType, peerConnection.Address)</span><br><span class="line">   env := vm.GetEnv(ccid, peerConnection.TLSConfig)</span><br><span class="line">	<span class="comment">//创建容器</span></span><br><span class="line">   err = vm.createContainer(imageName, containerName, args, env)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 将需要的TLS文件复制到链码容器内</span></span><br><span class="line">   <span class="keyword">if</span> peerConnection.TLSConfig != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="comment">// docker上传API需要一个tar文件，所以需要先把其打包为tar文件</span></span><br><span class="line">      payload := bytes.NewBuffer(<span class="literal">nil</span>)</span><br><span class="line">      gw := gzip.NewWriter(payload)</span><br><span class="line">      tw := tar.NewWriter(gw)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Note, we goofily base64 encode 2 of the TLS artifacts but not the other for strange historical reasons</span></span><br><span class="line">      err = addFiles(tw, <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">byte</span>&#123;</span><br><span class="line">         TLSClientKeyPath:      []<span class="type">byte</span>(base64.StdEncoding.EncodeToString(peerConnection.TLSConfig.ClientKey)),</span><br><span class="line">         TLSClientCertPath:     []<span class="type">byte</span>(base64.StdEncoding.EncodeToString(peerConnection.TLSConfig.ClientCert)),</span><br><span class="line">         TLSClientKeyFile:      peerConnection.TLSConfig.ClientKey,</span><br><span class="line">         TLSClientCertFile:     peerConnection.TLSConfig.ClientCert,</span><br><span class="line">         TLSClientRootCertFile: peerConnection.TLSConfig.RootCert,</span><br><span class="line">      &#125;)</span><br><span class="line">	<span class="comment">//...省略写入tar失败的报错代码</span></span><br><span class="line">      gw.Close()</span><br><span class="line"></span><br><span class="line">      err := vm.Client.UploadToContainer(containerName, docker.UploadToContainerOptions&#123;</span><br><span class="line">         InputStream:          bytes.NewReader(payload.Bytes()),</span><br><span class="line">         Path:                 <span class="string">&quot;/&quot;</span>,</span><br><span class="line">         NoOverwriteDirNonDir: <span class="literal">false</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 启动链码容器</span></span><br><span class="line">   err = vm.Client.StartContainer(containerName, <span class="literal">nil</span>)</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码第10行通过<code>vm.createContainer</code>创建容器，而第38行启动容器。</p>
<h4 id="createContainer"><a href="#createContainer" class="headerlink" title="createContainer"></a>createContainer</h4><p><a href="http://116.63.138.80:8080/xref/core/container/dockercontroller/dockercontroller.go#125">/core/container/dockercontroller/dockercontroller.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(vm *DockerVM)</span></span> createContainer(imageID, containerID <span class="type">string</span>, args, env []<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">   logger := dockerLogger.With(<span class="string">&quot;imageID&quot;</span>, imageID, <span class="string">&quot;containerID&quot;</span>, containerID)</span><br><span class="line">   logger.Debugw(<span class="string">&quot;create container&quot;</span>)</span><br><span class="line">   _, err := vm.Client.CreateContainer(docker.CreateContainerOptions&#123;</span><br><span class="line">      Name: containerID,</span><br><span class="line">      Config: &amp;docker.Config&#123;</span><br><span class="line">         Cmd:          args,</span><br><span class="line">         Image:        imageID,</span><br><span class="line">         Env:          env,</span><br><span class="line">         AttachStdout: vm.AttachStdOut,</span><br><span class="line">         AttachStderr: vm.AttachStdOut,</span><br><span class="line">      &#125;,</span><br><span class="line">      HostConfig: vm.HostConfig,</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   logger.Debugw(<span class="string">&quot;created container&quot;</span>)</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="startContainer"><a href="#startContainer" class="headerlink" title="startContainer"></a>startContainer</h4><p><a href="http://116.63.138.80:8080/xref/vendor/github.com/fsouza/go-dockerclient/container_start.go#35">/vendor/github.com/fsouza/go-dockerclient/container_start.go</a></p>
<p>该函数来自于vendor: Golang 第三方包管理器</p>
<blockquote>
<p>vendor的原理很简单: 将第三方依赖放入当前项目vendor目录中， 编译的时候从vendor目录中查找依赖而不从GOPATH/src中对应目录中查找。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span></span> startContainer(id <span class="type">string</span>, hostConfig *HostConfig, opts doOptions) <span class="type">error</span> &#123;</span><br><span class="line">   path := <span class="string">&quot;/containers/&quot;</span> + id + <span class="string">&quot;/start&quot;</span></span><br><span class="line">   <span class="keyword">if</span> c.serverAPIVersion == <span class="literal">nil</span> &#123;</span><br><span class="line">      c.checkAPIVersion()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> c.serverAPIVersion != <span class="literal">nil</span> &amp;&amp; c.serverAPIVersion.LessThan(apiVersion124) &#123;</span><br><span class="line">      opts.data = hostConfig</span><br><span class="line">      opts.forceJSON = <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">   resp, err := c.do(http.MethodPost, path, opts) <span class="comment">//核心方法</span></span><br><span class="line">   <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">   <span class="keyword">if</span> resp.StatusCode == http.StatusNotModified &#123;</span><br><span class="line">      <span class="keyword">return</span> &amp;ContainerAlreadyRunning&#123;ID: id&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="初始化链码"><a href="#初始化链码" class="headerlink" title="初始化链码"></a>初始化链码</h2><h3 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h3><p>这步就在<a href="#ExecuteLegacyInIt">ExecuteLegacyInIt</a>的第12行，完成了链码启动后进行。</p>
<p><a href="http://116.63.138.80:8080/xref/core/chaincode/chaincode_support.go#262">/core/chaincode/chaincode_support.go</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// execute executes a transaction and waits for it to complete until a timeout value.</span></span><br><span class="line">func (cs *ChaincodeSupport) execute(cctyp pb.ChaincodeMessage_Type, txParams *ccprovider.TransactionParams, namespace <span class="built_in">string</span>, input *pb.ChaincodeInput, h *Handler) (*pb.ChaincodeMessage, error) &#123;</span><br><span class="line">	input.Decorations = txParams.ProposalDecorations</span><br><span class="line"></span><br><span class="line">	payload, err := proto.Marshal(input)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		<span class="keyword">return</span> nil, errors.WithMessage(err, <span class="string">&quot;failed to create chaincode message&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//构建指定的消息</span></span><br><span class="line">	ccMsg := &amp;pb.ChaincodeMessage&#123;</span><br><span class="line">		Type:      cctyp,</span><br><span class="line">		Payload:   payload,</span><br><span class="line">		Txid:      txParams.TxID,</span><br><span class="line">		ChannelId: txParams.ChannelID,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送INIT消息给已启动的链码容器，完成初始化</span></span><br><span class="line">	timeout := cs.executeTimeout(namespace, input)</span><br><span class="line">	ccresp, err := h.Execute(txParams, namespace, ccMsg, timeout)</span><br><span class="line">	<span class="keyword">if</span> err != nil &#123;</span><br><span class="line">		<span class="keyword">return</span> nil, errors.WithMessage(err, <span class="string">&quot;error sending&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ccresp, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="处理链码消息"><a href="#处理链码消息" class="headerlink" title="处理链码消息"></a>处理链码消息</h2><p>为了处理来自链码的各种消息并响应，Peer侧要创建Handler结构(HandleChaincodeStream)。</p>
<h3 id="HandleChaincodeStream"><a href="#HandleChaincodeStream" class="headerlink" title="HandleChaincodeStream"></a>HandleChaincodeStream</h3><p><a href="http://116.63.138.80:8080/xref/core/chaincode/chaincode_support.go#109">/core/chaincode/chaincode_support.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HandleChaincodeStream implements ccintf.HandleChaincodeStream for all vms to call with appropriate stream</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *ChaincodeSupport)</span></span> HandleChaincodeStream(stream ccintf.ChaincodeStream) <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> deserializerFactory privdata.IdentityDeserializerFactoryFunc = <span class="function"><span class="keyword">func</span><span class="params">(channelID <span class="type">string</span>)</span></span> msp.IdentityDeserializer &#123;</span><br><span class="line">		<span class="keyword">return</span> cs.Peer.Channel(channelID).MSPManager()</span><br><span class="line">	&#125;</span><br><span class="line">	handler := &amp;Handler&#123;</span><br><span class="line">		Invoker:                cs,</span><br><span class="line">		Keepalive:              cs.Keepalive,</span><br><span class="line">		Registry:               cs.HandlerRegistry,</span><br><span class="line">		ACLProvider:            cs.ACLProvider,</span><br><span class="line">		TXContexts:             NewTransactionContexts(),</span><br><span class="line">		ActiveTransactions:     NewActiveTransactions(),</span><br><span class="line">		BuiltinSCCs:            cs.BuiltinSCCs,</span><br><span class="line">		QueryResponseBuilder:   &amp;QueryResponseGenerator&#123;MaxResultLimit: <span class="number">100</span>&#125;,</span><br><span class="line">		UUIDGenerator:          UUIDGeneratorFunc(util.GenerateUUID),</span><br><span class="line">		LedgerGetter:           cs.Peer,</span><br><span class="line">		IDDeserializerFactory:  deserializerFactory,</span><br><span class="line">		DeployedCCInfoProvider: cs.DeployedCCInfoProvider,</span><br><span class="line">		AppConfig:              cs.AppConfig,</span><br><span class="line">		Metrics:                cs.HandlerMetrics,</span><br><span class="line">		TotalQueryLimit:        cs.TotalQueryLimit,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> handler.ProcessStream(stream)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第24行的<code>handler.ProcessStream(stream)</code>会创建一个循环，接收链码侧消息，并不断调用Handler的handleMessage(…)方法，对消息进行处理，主要实现逻辑如下：</p>
<h4 id="ProcessStream"><a href="#ProcessStream" class="headerlink" title="ProcessStream"></a>ProcessStream</h4><p><a href="http://116.63.138.80:8080/xref/core/chaincode/handler.go?fi=ProcessStream#364">/core/chaincode/handler.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Handler)</span></span> ProcessStream(stream ccintf.ChaincodeStream) <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> h.deregister()</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// 定期向链码发送心跳消息</span></span><br><span class="line">	<span class="keyword">var</span> keepaliveCh &lt;-<span class="keyword">chan</span> time.Time</span><br><span class="line">	<span class="keyword">if</span> h.Keepalive != <span class="number">0</span> &#123;</span><br><span class="line">		ticker := time.NewTicker(h.Keepalive)</span><br><span class="line">		<span class="keyword">defer</span> ticker.Stop()</span><br><span class="line">		keepaliveCh = ticker.C</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// holds return values from gRPC Recv below</span></span><br><span class="line">	<span class="keyword">type</span> recvMsg <span class="keyword">struct</span> &#123;</span><br><span class="line">		msg *pb.ChaincodeMessage</span><br><span class="line">		err <span class="type">error</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//从链码中获取消息结构</span></span><br><span class="line">	msgAvail := <span class="built_in">make</span>(<span class="keyword">chan</span> *recvMsg, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	receiveMessage := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		in, err := h.chatStream.Recv()</span><br><span class="line">		msgAvail &lt;- &amp;recvMsg&#123;in, err&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> receiveMessage()</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> rmsg := &lt;-msgAvail: <span class="comment">//收到消息</span></span><br><span class="line">			<span class="keyword">switch</span> &#123;</span><br><span class="line">			<span class="comment">// Defer the deregistering of the this handler.</span></span><br><span class="line">			<span class="keyword">case</span> rmsg.err == io.EOF: <span class="comment">//连接终止</span></span><br><span class="line">				chaincodeLogger.Debugf(<span class="string">&quot;received EOF, ending chaincode support stream: %s&quot;</span>, rmsg.err)</span><br><span class="line">				<span class="keyword">return</span> rmsg.err</span><br><span class="line">			<span class="keyword">case</span> rmsg.err != <span class="literal">nil</span>:    <span class="comment">//连接错误</span></span><br><span class="line">				err := errors.Wrap(rmsg.err, <span class="string">&quot;receive from chaincode support stream failed&quot;</span>)</span><br><span class="line">				chaincodeLogger.Debugf(<span class="string">&quot;%+v&quot;</span>, err)</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			<span class="keyword">case</span> rmsg.msg == <span class="literal">nil</span>:    <span class="comment">//空消息</span></span><br><span class="line">				err := errors.New(<span class="string">&quot;received nil message, ending chaincode support stream&quot;</span>)</span><br><span class="line">				chaincodeLogger.Debugf(<span class="string">&quot;%+v&quot;</span>, err)</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			<span class="keyword">default</span>: <span class="comment">//正常消息，进行处理</span></span><br><span class="line">				err := h.handleMessage(rmsg.msg)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;      </span><br><span class="line">					err = errors.WithMessage(err, <span class="string">&quot;error handling message, ending stream&quot;</span>)</span><br><span class="line">					chaincodeLogger.Errorf(<span class="string">&quot;[%s] %+v&quot;</span>, shorttxid(rmsg.msg.Txid), err)</span><br><span class="line">					<span class="keyword">return</span> err</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">go</span> receiveMessage()</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> sendErr := &lt;-h.errChan:   <span class="comment">//发送消息时收到错误，则终止发送</span></span><br><span class="line">			err := errors.Wrapf(sendErr, <span class="string">&quot;received error while sending message, ending chaincode support stream&quot;</span>)</span><br><span class="line">			chaincodeLogger.Errorf(<span class="string">&quot;%s&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		<span class="keyword">case</span> &lt;-keepaliveCh:            <span class="comment">//定期发送心跳消息</span></span><br><span class="line">			<span class="comment">// if no error message from serialSend, KEEPALIVE happy, and don&#x27;t care about error</span></span><br><span class="line">			<span class="comment">// (maybe it&#x27;ll work later)</span></span><br><span class="line">			h.serialSendAsync(&amp;pb.ChaincodeMessage&#123;Type: pb.ChaincodeMessage_KEEPALIVE&#125;)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>fabric</tag>
        <tag>optee</tag>
      </tags>
  </entry>
  <entry>
    <title>First Blog</title>
    <url>/2023/04/11/First-Blog/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<p><strong>你好</strong></p>
<p>这是一个标记</p>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>重返赛尔号</title>
    <url>/2023/04/15/Saier/</url>
    <content><![CDATA[<p>最近赛尔号重新回到我的视野，在《我们的客栈》这档综艺上，张杰唱出了《赛尔号的主题曲》，童年回忆，好听热血！</p>
<span id="more"></span>

<p><a href="https://www.bilibili.com/video/BV1KV4y197uu/?buvid=XXBF171BADEDBA519F07717CC8D1473E6761D&is_story_h5=false&mid=Kqjp3X2i+Yh2JUTtjqqvog==&p=1&plat_id=114&share_from=ugc&share_medium=android&share_plat=android&share_session_id=952c01fa-eaed-499d-8d80-6115462c4edc&share_source=WEIXIN&share_tag=s_i&timestamp=1681272995&unique_k=LFUtgXz&up_id=42043541">【我们的客栈】张杰放飞自我，激情献唱《这里是神奇的赛尔号》_哔哩哔哩_bilibili</a></p>
<p>赛尔号是童年的最好的回忆之一，所以我重返塞尔号。下载主流浏览器基本都已弃用Flash，所以玩4399的游戏还得专门下载Flash插件。另外还要实名认证才能登录。</p>
<h3 id="我的塞尔信息"><a href="#我的塞尔信息" class="headerlink" title="我的塞尔信息"></a>我的塞尔信息</h3><p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230415164359624.png" alt="image-20230415164359624"></p>
<p>最开始玩的时候根本就没有几米，几米只在</p>
<h3 id="四大星系"><a href="#四大星系" class="headerlink" title="四大星系"></a>四大星系</h3><h4 id="玄武星系（最经典的星系for-everyone）："><a href="#玄武星系（最经典的星系for-everyone）：" class="headerlink" title="玄武星系（最经典的星系for everyone）："></a>玄武星系（最经典的星系for everyone）：</h4><p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230415164518976.png" alt="image-20230415164518976"></p>
<p>青龙星系（最梦幻的星系for me）：</p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230415164624753.png" alt="image-20230415164624753"></p>
<p>白虎星系</p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230415164718822.png" alt="image-20230415164718822"></p>
<p>朱雀星系</p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230415164756092.png" alt="image-20230415164756092"></p>
<h3 id="特色场景"><a href="#特色场景" class="headerlink" title="特色场景"></a>特色场景</h3><h4 id="光暗迷城"><a href="#光暗迷城" class="headerlink" title="光暗迷城"></a>光暗迷城</h4><p>这个场景进入是随机白天和黑夜两种版本。</p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230415165003123.png" alt="image-20230415165003123"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230415165231591.png" alt="image-20230415165231591"></p>
<p>吉娜斯和海德拉也是超有特色和感觉的两个精灵！</p>
<h4 id="怀念的精灵们"><a href="#怀念的精灵们" class="headerlink" title="怀念的精灵们"></a>怀念的精灵们</h4><p>（基本涵盖所有）：</p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000320141.png" alt="image-20230416000320141"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000325814.png" alt="image-20230416000325814"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000406508.png" alt="image-20230416000406508"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000440132.png" alt="image-20230416000440132"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000505034.png" alt="image-20230416000505034"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000533779.png" alt="image-20230416000533779"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000601910.png" alt="image-20230416000601910"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000643431.png" alt="image-20230416000643431"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000722892.png" alt="image-20230416000722892"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000809872.png" alt="image-20230416000809872"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000857700.png" alt="image-20230416000857700"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000931066.png" alt="image-20230416000931066"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416000953740.png" alt="image-20230416000953740"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001016176.png" alt="image-20230416001016176"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001033849.png" alt="image-20230416001033849"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001121469.png" alt="image-20230416001121469"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001307826.png" alt="image-20230416001307826"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001148027.png" alt="image-20230416001148027"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001208673.png" alt="image-20230416001208673"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001244306.png" alt="image-20230416001244306"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001229843.png" alt="image-20230416001229843"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001322168.png" alt="image-20230416001322168"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001347528.png" alt="image-20230416001347528"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001415610.png" alt="image-20230416001415610"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001435583.png" alt="image-20230416001435583"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001459344.png" alt="image-20230416001459344"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001519720.png" alt="image-20230416001519720"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001552526.png" alt="image-20230416001552526"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001643011.png" alt="image-20230416001643011"><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001716128.png" alt="image-20230416001716128"></p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230416001627753.png" alt="image-20230416001627753"></p>
]]></content>
      <categories>
        <category>娱乐</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>benchmark</title>
    <url>/2023/04/11/benchmark/</url>
    <content><![CDATA[<h2 id="SysBench"><a href="#SysBench" class="headerlink" title="SysBench"></a><strong>SysBench</strong></h2><p>本文介绍使用SysBench工具对docker容器内的MySQL进行测试的安装测试过程。</p>
<hr>
<blockquote>
<p>参考博客[(76条消息) <a href="https://blog.csdn.net/liangsena/article/details/128151041">MySQL]-压力测试之Sysbench_sysbench测试mysql_森格的博的博客-CSDN博客</a></p>
<p>简介：在docker中安装mysql和sysbench，并使用sysbench测试mysql</p>
</blockquote>
<span id="more"></span>

<h3 id="构建MySQL的docker容器"><a href="#构建MySQL的docker容器" class="headerlink" title="构建MySQL的docker容器"></a>构建MySQL的docker容器</h3><p><strong>安装的镜像介绍：</strong><a href="https://hub.docker.com/r/ubuntu/mysql">ubuntu/mysql - Docker Image | Docker Hub</a></p>
<ol>
<li>拉取docker镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu/mysql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>运行docker容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name mysql-container -e TZ=UTC -p 30306:3306 -e MYSQL_ROOT_PASSWORD=123 ubuntu/mysql:latest</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>进入docker容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql-container /bin/bash</span><br></pre></td></tr></table></figure>



<h3 id="Sysbench测试"><a href="#Sysbench测试" class="headerlink" title="Sysbench测试"></a>Sysbench测试</h3><p><strong>(以下操作均在docker容器内部进行)</strong></p>
<ol>
<li>更新并安装依赖包</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line"></span><br><span class="line">apt install -y vim curl</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编辑my.cnf</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">在最后加上skip-grant-tables （这步是跳过权限检查）</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>连接mysql数据库</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p  然后输入密码 （后面直接输mysql就可以了）</span><br><span class="line"></span><br><span class="line">显示当前的数据库: show databases;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建数据库</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create database loadtest;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">（附删除数据库操作：drop database loadtest;）</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>断开mysql连接</li>
</ol>
<p><code>exit</code></p>
<ol start="6">
<li>安装sysbench</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install -y sysbench</span><br></pre></td></tr></table></figure>

<p>(可选，查看sysbench版本检查是否安装成功：sysbench –version)</p>
<ol start="7">
<li>构造测试数据（注意，下面的命令里不能像博客里一样设置ip地址）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench --db-driver=mysql --mysql-db=loadtest --report-interval=10 --mysql-user=root --mysql-password=123 --mysql-port=3306 --tables=10 --table-size=1000 --threads=20 oltp_read_write prepare</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>运行</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench --db-driver=mysql --mysql-db=loadtest --time=100 --report-interval=10 --mysql-user=root --mysql-password=123 --mysql-port=3306 --tables=10 --table-size=1000 --threads=20 oltp_read_write run</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>benchmark</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>github加速</title>
    <url>/2023/04/11/github%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p>github在下载时速度过慢，可以用下面的加速网站:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://gh.api.99988866.xyz</span><br><span class="line">https://gh.con.sh</span><br><span class="line">https://gh.ddlc.top</span><br><span class="line">https://gh2.yanqishui.work</span><br><span class="line">https://ghdl.feizhuqwq.cf</span><br><span class="line">https://ghproxy.com</span><br><span class="line">https://ghps.cc</span><br><span class="line">https://git.xfj0.cn</span><br><span class="line">https://github.91chi.fun</span><br><span class="line">https://proxy.zyun.vip</span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<p>将上述任意网址复制到目标网址前，git clone [上述网站]/[目标网址]，例如：</p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230411191439353.png" alt="git clone示例"></p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux进程调度及管理分析</title>
    <url>/2023/04/12/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="Linux进程调度原理"><a href="#Linux进程调度原理" class="headerlink" title="Linux进程调度原理"></a>Linux进程调度原理</h2><p>进程是运行中的程序。程序是一个静态的概念，而进程是一个动态的概念，因此一旦多进程动态调度起来，情况一定就变得复杂的多。</p>
<span id="more"></span>

<p>Linux内核：4.4.6 <a href="https://elixir.bootlin.com/linux/v4.4.6/source">Linux source code (v4.4.6) - Bootlin</a></p>
<h3 id="一、进程描述符"><a href="#一、进程描述符" class="headerlink" title="一、进程描述符"></a>一、进程描述符</h3><h4 id="进程控制块（PCB）"><a href="#进程控制块（PCB）" class="headerlink" title="进程控制块（PCB）"></a>进程控制块（PCB）</h4><p>PCB是OS控制进程运行的数据结构。PCB的代码位于<a href="https://elixir.bootlin.com/linux/v4.4.6/source/include/linux/sched.h#L1379"><code>include\linux\sched.h</code>的1380行</a>。数据结构名为<code>task_struct</code>，该结构内代码较多，抽象如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">volatile</span> <span class="type">long</span> state; <span class="comment">//运行状态，-1未运行，0运行，&gt;0终止</span></span><br><span class="line">    <span class="type">void</span> *<span class="built_in">stack</span>; <span class="comment">//指向thread_info的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>, *<span class="title">active_mm</span>;</span> </span><br><span class="line">    <span class="type">pid_t</span> pid; <span class="comment">//进程标识信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_struct</span> *<span class="title">fs</span>； //文件系统信息</span></span><br><span class="line"><span class="class">    <span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span>;</span> <span class="comment">//打开文件信息</span></span><br><span class="line">    <span class="comment">/* 信号句柄 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">signal_struct</span> *<span class="title">signal</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigpending</span> <span class="title">pending</span>;</span></span><br><span class="line"> 	<span class="class"><span class="keyword">struct</span> <span class="title">thread_struct</span> <span class="title">thread</span>;</span> <span class="comment">//该进程的CPU特定状态   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="二、进程调度时机"><a href="#二、进程调度时机" class="headerlink" title="二、进程调度时机"></a>二、进程调度时机</h3><h4 id="内核控制流"><a href="#内核控制流" class="headerlink" title="内核控制流"></a>内核控制流</h4><p>四种内核控制流分别为：中断处理函数、异常处理函数、系统调用、内核线程。</p>
<ul>
<li><p>中断处理函数</p>
<p>apic_timer_interrupt、common_interrupt、…</p>
<p><strong>__do_softirq</strong></p>
</li>
<li><p>异常处理函数</p>
<p>page_fault、nmi、int3、general_protection</p>
</li>
<li><p>系统调用总控函数：</p>
<p><strong>entry_SYSENTER_32、entry_INT80_32</strong></p>
</li>
<li><p>内核线程</p>
<p><strong>kthread</strong></p>
</li>
</ul>
<h4 id="进程调度时机"><a href="#进程调度时机" class="headerlink" title="进程调度时机"></a>进程调度时机</h4><h5 id="1-主动放弃"><a href="#1-主动放弃" class="headerlink" title="1.主动放弃"></a>1.主动放弃</h5><p>在<strong>系统调用</strong>或<strong>内核线程</strong>执行过程中，需要主动放弃时，或者在一些有意插入的_cond_resched语句处发现设置了“重新调度”标志时。</p>
<p>ps.页故障处理时也可能调用_cond_resched</p>
<h5 id="2-重新调度"><a href="#2-重新调度" class="headerlink" title="2.重新调度"></a>2.重新调度</h5><p>在中断、异常和系统调用执行结束、返回用户态之前，如果当前进</p>
<p>程被设置了<strong>“重新调度”</strong>标志。</p>
<h2 id="进程调度与切换实验分析"><a href="#进程调度与切换实验分析" class="headerlink" title="进程调度与切换实验分析"></a>进程调度与切换实验分析</h2><h3 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h3><p>编⼀个程序（abc.c）在3个进程中分别循环输出字母’A’、’B’和’C’，每输出⼀个字母就主动放弃cpu；然后通过对内核的调试，画出3个进程运行的时序图。</p>
<p>abc.c代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">char</span>* x)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">      write(<span class="number">1</span>, x, <span class="number">1</span>); <span class="comment">//系统调用write输出字符（）</span></span><br><span class="line">      sched_yield(); <span class="comment">//主动放弃CPU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> pid1, pid2, pid3;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;main starting\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (!(pid1 = fork()))&#123; <span class="comment">//系统调用fork创建子进程（成功后父进程返回子进程pid，子进程返回0）</span></span><br><span class="line">    loop(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (!(pid2 = fork()))&#123;</span><br><span class="line">    loop(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (!(pid3 = fork()))&#123;</span><br><span class="line">    loop(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  waitpid(pid1, &amp;status, <span class="number">0</span>); <span class="comment">//父进程阻塞</span></span><br><span class="line">  waitpid(pid2, &amp;status, <span class="number">0</span>);</span><br><span class="line">  waitpid(pid3, &amp;status, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;main exiting\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p>VMware Ubuntu：其上运行qemu虚拟机，连接qemu虚拟机并gdb连接调试</p>
<p>Qemu Ubuntu：运行Linux内核，并运行abc.c程序</p>
<h4 id="abc-c程序"><a href="#abc-c程序" class="headerlink" title="abc.c程序"></a>abc.c程序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">char</span>* x)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">      write(<span class="number">1</span>, x, <span class="number">1</span>);</span><br><span class="line">      sched_yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> pid1, pid2;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;main starting\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!(pid1 = fork()))&#123;</span><br><span class="line">    loop(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!(pid2 = fork()))&#123;</span><br><span class="line">    loop(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  loop(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  waitpid(pid1, &amp;status, <span class="number">0</span>);</span><br><span class="line">  waitpid(pid2, &amp;status, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;main exiting\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成可执行文件，并测试，会输出一堆abc字符无限循环，成功后，重新编译成成带调试信息的32位可执行文件abc，可使用如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试</span></span><br><span class="line">gcc abc.c -o abc</span><br><span class="line">./abc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生成带调试信息的abc</span></span><br><span class="line">gcc -static -g -m32 abc.c -o abc</span><br></pre></td></tr></table></figure>

<p>将带调试信息的abc置入qemu内文件系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp abc ~/_install/tmp/	</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可在roofts⽬录下执⾏如下命令：</span></span><br><span class="line">cd ~/aos/lab/rootfs</span><br><span class="line">./mkroofts.sh</span><br></pre></td></tr></table></figure>

<p>开启两个terminal：</p>
<p>1.一侧开启Qemu虚拟机，并通过-s参数等待gdb连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/aos/lab</span><br><span class="line">./run s</span><br></pre></td></tr></table></figure>

<p>2.另一侧开启Qemu虚拟机，并通过-s参数等待gdb连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb vmlinux -x ~/aos/lab/abc.gdb</span><br><span class="line">gdb vmlinux -x ~/aos/lab/2.gdb</span><br></pre></td></tr></table></figure>

<p>初始gdb操作：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭所有断点，先完成qumu侧启动</span></span><br><span class="line">disable</span><br><span class="line">c</span><br><span class="line"><span class="comment">//打开第一个断点</span></span><br><span class="line">enable <span class="number">1</span></span><br><span class="line">c</span><br><span class="line"><span class="comment">//在qemu侧执行可执行文件abc</span></span><br><span class="line"><span class="comment">//打开所有断点，关闭1号断点</span></span><br><span class="line">enable</span><br><span class="line">disable <span class="number">1</span></span><br><span class="line">c</span><br></pre></td></tr></table></figure>



<h4 id="gdb重要符号含义解析"><a href="#gdb重要符号含义解析" class="headerlink" title="gdb重要符号含义解析"></a>gdb重要符号含义解析</h4><p>弹出第一个字母：</p>
<p><img src="D:\CS\markdown\Pictures\image-20230414162325653.png" alt="image-20230414162325653"></p>
<p>弹出第二个字母</p>
<p><img src="D:\CS\markdown\Pictures\image-20230414164309954.png" alt="image-20230414164309954"></p>
<ul>
<li>$lx_current().pid：当前进程的pid</li>
<li>$lx_current().comm：当前进程最近执行的可执行文件的名字</li>
<li>$lx_current().state：了解当前进程的状态（就绪态、运行态、阻塞态、停止态等）</li>
<li>$lx_per_cpu(“__preempt_count”) ：表示当前 CPU 的抢占计数器（Preemption Count）</li>
</ul>
<ul>
<li><p>调度的开始和结束：函数__schedule的进⼊和退出</p>
</li>
<li><p>进程切换的开始与恢复：函数__switch_to的进⼊和退出，参数next_p指向新进程的进程控制块。</p>
</li>
<li><p>中断处理的开始：smp_apic_timer_interrupt（时钟中断），do_IRQ（其它外部中断）</p>
</li>
<li><p>中断和异常的结束：从ret_from_intr/ret_from_exception开始准备结束；真正结束是在restore_all，但这⾥也有可能是系统调⽤的结束。</p>
</li>
<li><p>缺页异常的开始：do_page_fault    </p>
</li>
<li><p>系统调用的开始和结束：函数do_fast_syscall_32的进⼊和退出，在此函数的参数regs-&gt;orig_ax中记录了系统调用号；有时系统调用的结束位置是在restore_all。系统调用返回前，一般会执行函数prepare_exit_to_usermode。</p>
</li>
<li><p>增加和删除CFS运行队列中的节点：enqueue_task_fair和dequeue_task_fair，函数参数p指向被操作进程的进程控制块。</p>
</li>
<li><p>准备由核⼼态进⼊⽤户态：prepare_exit_to_usermode</p>
</li>
<li><p>设置“需要剥夺当前进程⽽重新调度”标志：set_tsk_need_resched    </p>
</li>
<li><p>resume_userspace发生时查看中断/异常号的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frame prepare_exit_to_usermode</span><br><span class="line">p ~regs-&gt;orig_ax</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">display ((struct sched_entity *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.tasks_timeline.rb_node-&gt;rb_right - 0x8))-&gt;vruntime</span><br><span class="line">display ((struct task_struct *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.tasks_timeline.rb_node-&gt;rb_right - 0x4c))-&gt;pid</span><br><span class="line"></span><br><span class="line">display ((struct sched_entity *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.tasks_timeline.rb_node - 0x8))-&gt;vruntime</span><br><span class="line">display ((struct task_struct *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.tasks_timeline.rb_node - 0x4c))-&gt;pid</span><br><span class="line"></span><br><span class="line">display ((struct sched_entity *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.rb_leftmost - 0x8))-&gt;vruntime</span><br><span class="line">display ((struct task_struct *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.rb_leftmost - 0x4c))-&gt;pid</span><br><span class="line"></span><br><span class="line">display   $lx_per_cpu(&quot;runqueues&quot;).nr_running</span><br><span class="line">display   $lx_per_cpu(&quot;runqueues&quot;).cfs.min_vruntime</span><br><span class="line">display   $lx_current().se.vruntime</span><br><span class="line">display/x $lx_per_cpu(&quot;__preempt_count&quot;)</span><br><span class="line">display/x $lx_thread_info($lx_current()).flags</span><br><span class="line">display   $lx_current().comm</span><br><span class="line">display   $lx_current().state</span><br><span class="line">display   $lx_current().pid</span><br></pre></td></tr></table></figure>

<ul>
<li><p>display $lx_per_cpu(“runqueues”).nr_running：显示当前 CPU 上运行队列中的进程数目，即正在等待执行的进程数；</p>
</li>
<li><p>display $lx_per_cpu(“runqueues”).cfs.min_vruntime：显示当前 CPU 上 CFS 调度器的最小虚拟运行时间，即下一个应该被调度的进程应具有的最小虚拟运行时间；</p>
</li>
<li><p>display $lx_current().se.vruntime：显示当前进程的虚拟运行时间，即进程已经消耗的 CPU 时间；</p>
</li>
<li><p>display/x $lx_per_cpu(“__preempt_count”)：以十六进制格式显示当前 CPU 的抢占计数器值，用于检查当前是否禁止了抢占操作；</p>
</li>
<li><p>display/x $lx_thread_info($lx_current()).flags：以十六进制格式显示当前进程的线程信息标志位，用于了解当前进程的属性；</p>
<blockquote>
<p>在该flags的第3位(位置计数从低位开始、从0开始)</p>
</blockquote>
</li>
<li><p>display $lx_current().comm：显示当前进程的名字（Command Name），即可执行文件的名称；</p>
</li>
<li><p>display $lx_current().state：显示当前进程的状态，如 running、sleeping、stopped 等；</p>
</li>
<li><p>display $lx_current().pid：显示当前进程的 ID 号。</p>
</li>
</ul>
<ul>
<li>display ((struct sched_entity *)((void *)$lx_per_cpu(“runqueues”).cfs.tasks_timeline.rb_node-&gt;rb_right - 0x8))-&gt;vruntime：显示当前 CPU 上 CFS 调度器中最小虚拟运行时间对应的进程的虚拟运行时间；</li>
<li>display ((struct task_struct *)((void *)$lx_per_cpu(“runqueues”).cfs.tasks_timeline.rb_node-&gt;rb_right - 0x4c))-&gt;pid：显示当前 CPU 上 CFS 调度器中最小虚拟运行时间对应的进程的进程 ID；</li>
<li>display ((struct sched_entity *)((void *)$lx_per_cpu(“runqueues”).cfs.tasks_timeline.rb_node - 0x8))-&gt;vruntime：显示当前 CPU 上 CFS 调度器中最靠左的进程的虚拟运行时间；</li>
<li>display ((struct task_struct *)((void *)$lx_per_cpu(“runqueues”).cfs.tasks_timeline.rb_node - 0x4c))-&gt;pid：显示当前 CPU 上 CFS 调度器中最靠左的进程的进程 ID；</li>
<li>display ((struct sched_entity *)((void *)$lx_per_cpu(“runqueues”).cfs.rb_leftmost - 0x8))-&gt;vruntime：显示当前 CPU 上 CFS 调度器中最靠左的进程（同上）的虚拟运行时间；</li>
<li>display ((struct task_struct *)((void *)$lx_per_cpu(“runqueues”).cfs.rb_leftmost - 0x4c))-&gt;pid：显示当前 CPU 上 CFS 调度器中最靠左的进程（同上）的进程 ID。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">target remote localhost:1234</span><br><span class="line"></span><br><span class="line">break do_execve</span><br><span class="line">  condition $bpnum ($lx_current().mm != 0)</span><br><span class="line">  commands</span><br><span class="line">    printf &quot;filename: %s\n&quot;, filename-&gt;name</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">break __schedule</span><br><span class="line">  commands</span><br><span class="line">    bt</span><br><span class="line">  end</span><br><span class="line">break kernel/sched/core.c:3188</span><br><span class="line"></span><br><span class="line">break __switch_to</span><br><span class="line">  commands</span><br><span class="line">    printf &quot;next_p-&gt;pid: %d\n&quot;, next_p-&gt;pid</span><br><span class="line">    printf &quot;next_p-&gt;se.vruntime: %d\n&quot;, next_p-&gt;se.vruntime</span><br><span class="line">  end</span><br><span class="line">b  process_32.c:318</span><br><span class="line">  commands</span><br><span class="line">    bt</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">break do_fast_syscall_32</span><br><span class="line">  commands</span><br><span class="line">    printf &quot;regs-&gt;orig_ax: %d\n&quot;, regs-&gt;orig_ax</span><br><span class="line">  end</span><br><span class="line">b arch/x86/entry/common.c:486</span><br><span class="line">  commands</span><br><span class="line">    printf &quot;regs-&gt;orig_ax: %d\n&quot;, regs-&gt;orig_ax</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">break prepare_exit_to_usermode</span><br><span class="line"></span><br><span class="line">b do_IRQ</span><br><span class="line">  commands</span><br><span class="line">    printf &quot;irq vector: 0x%x\n&quot;, ~regs-&gt;orig_ax</span><br><span class="line">  end</span><br><span class="line">b smp_apic_timer_interrupt</span><br><span class="line"></span><br><span class="line">b do_page_fault</span><br><span class="line">b do_device_not_available</span><br><span class="line"></span><br><span class="line">b ret_from_exception</span><br><span class="line">b restore_all</span><br><span class="line"></span><br><span class="line">b __do_softirq</span><br><span class="line">b softirq.c:302</span><br><span class="line"></span><br><span class="line">break set_tsk_need_resched</span><br><span class="line"></span><br><span class="line">break enqueue_task_fair</span><br><span class="line">  commands</span><br><span class="line">    printf &quot;p-&gt;pid: %d\n&quot;, p-&gt;pid</span><br><span class="line">    printf &quot;p-&gt;se.vruntime: %d\n&quot;, p-&gt;se.vruntime</span><br><span class="line">  end</span><br><span class="line">break dequeue_task_fair</span><br><span class="line">  commands</span><br><span class="line">    printf &quot;p-&gt;pid: %d\n&quot;, p-&gt;pid</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">break update_curr</span><br><span class="line">  commands</span><br><span class="line">    printf &quot;(gdb) fini\n&quot;</span><br><span class="line">    fini</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">display ((struct sched_entity *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.tasks_timeline.rb_node-&gt;rb_right - 0x8))-&gt;vruntime</span><br><span class="line">display ((struct task_struct *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.tasks_timeline.rb_node-&gt;rb_right - 0x4c))-&gt;pid</span><br><span class="line"></span><br><span class="line">display ((struct sched_entity *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.tasks_timeline.rb_node - 0x8))-&gt;vruntime</span><br><span class="line">display ((struct task_struct *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.tasks_timeline.rb_node - 0x4c))-&gt;pid</span><br><span class="line"></span><br><span class="line">display ((struct sched_entity *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.rb_leftmost - 0x8))-&gt;vruntime</span><br><span class="line">display ((struct task_struct *)((void *)$lx_per_cpu(&quot;runqueues&quot;).cfs.rb_leftmost - 0x4c))-&gt;pid</span><br><span class="line"></span><br><span class="line">display   $lx_per_cpu(&quot;runqueues&quot;).nr_running</span><br><span class="line"></span><br><span class="line">display   $lx_per_cpu(&quot;runqueues&quot;).cfs.min_vruntime</span><br><span class="line"></span><br><span class="line">display   $lx_current().se.vruntime</span><br><span class="line"></span><br><span class="line">display/x $lx_per_cpu(&quot;__preempt_count&quot;)</span><br><span class="line"></span><br><span class="line">display/x $lx_thread_info($lx_current()).flags</span><br><span class="line"></span><br><span class="line">display   $lx_current().comm</span><br><span class="line">display   $lx_current().state</span><br><span class="line">display   $lx_current().pid</span><br><span class="line"></span><br><span class="line">disable</span><br><span class="line">enable 1</span><br><span class="line">dir abc</span><br><span class="line">add-symbol-file abc/abc 0x080482b0</span><br><span class="line">b abc.c:main</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>FPC阅读笔记</title>
    <url>/2023/04/18/FPC%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tz4fabric笔记</title>
    <url>/2023/04/13/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/tz4fabric/</url>
    <content><![CDATA[<p>本论文中将自己实现的原型称为：FOC(Fabric OPTEE Chaincode)，其借鉴了IBM发表的FPC(Fabric Private Chaincode)[[1]](#Blockchain and Trusted Computing: Problems, Pitfalls, and a Solution for Hyperledger Fabric)，FPC采用的是Intel SGX作为TEE。而TZ4Fabric提过了一种通过TEE内置proxy的方式提供智能合约机密计算的方式。哈哈哈</p>
<span id="more"></span>

<blockquote>
<p>论文基本信息</p>
<p><strong>TZ4Fabric: Executing Smart Contracts with ARM TrustZone</strong></p>
<ul>
<li>2020 International Symposium on Reliable Distributed Systems (SRDS)</li>
</ul>
<p><strong>Execution of Smart Contracts with ARM TrustZone</strong></p>
<p>(Designing and Implementing a Prototype for Hyperledger Fabric Chaincode Execution with OP-TEE)</p>
<ul>
<li>Master Thesis</li>
</ul>
</blockquote>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>整体上的Fabric的工作流程并未改变，仍遵循“执行——排序——提交”模式。本文作者也并未修改Fabric源码。本文的架构如下图所示，主要的修改在于peer端新增了一个chaincode_wrapper的链码，负责调用在普通世界的Proxy（CA），Proxy调用安全世界的用户链码TA执行。</p>
<p><img src="https://jsdelivr.codeqihan.com/gh/KuanXY/blogImage@main/img/image-20230419105134925.png" alt="image-20230419105134925"></p>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── API-FOC-simple.png</span><br><span class="line">├── chaincode</span><br><span class="line">│   ├── Android.mk</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── dummy_main.cpp</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   └── ta</span><br><span class="line">├── chaincode_proxy</span><br><span class="line">│   ├── Android.mk</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── host</span><br><span class="line">│   └── Makefile</span><br><span class="line">├── chaincode_wrapper</span><br><span class="line">│   ├── chaincode.go</span><br><span class="line">│   ├── cmd</span><br><span class="line">│   └── proto</span><br><span class="line">├── documentation</span><br><span class="line">│   ├── chaincode-and-chaincode-proxy-qemu.md</span><br><span class="line">│   ├── chaincode-and-chaincode-proxy-rapi.md</span><br><span class="line">│   ├── chaincode-wrapper.md</span><br><span class="line">│   ├── go1<span class="number">.11</span><span class="number">.4</span>.linux-amd64.tar.gz</span><br><span class="line">│   ├── install-fabric.sh</span><br><span class="line">│   ├── install-grpc.sh</span><br><span class="line">│   ├── install-optee.sh</span><br><span class="line">│   ├── qemu_br_tap.sh</span><br><span class="line">│   └── UART.jpeg</span><br><span class="line">├── FOC-architecture<span class="number">-13.8</span>.png</span><br><span class="line">├── README.md</span><br><span class="line">└── report_mueller_master_thesis_final_28<span class="number">.8</span><span class="number">.19</span>.pdf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到项目中主要由四个文件夹组成：</p>
<ul>
<li>chaincode：C代码，实现咖啡应用的智能合约TA链码，运行于TEE内。</li>
<li>chaincode_proxy：C++代码，以TA形式运行于TEE内的代理，负责与外界的peer节点进行通信。</li>
<li>chaincode_wrapper：go代码，标准的链码，负责与chaincode_proxy通信，调用TEE侧链码应用。</li>
<li>documents：一系列安装说明文档</li>
</ul>
<p>下面分别对四个目录的代码进行分析：</p>
<h4 id="chaincode-wrapper"><a href="#chaincode-wrapper" class="headerlink" title="chaincode_wrapper"></a>chaincode_wrapper</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── chaincode.go </span><br><span class="line">├── cmd</span><br><span class="line">│   └── main.go</span><br><span class="line">└── proto</span><br><span class="line">    └── invocation.proto</span><br><span class="line"></span><br><span class="line">2 directories, 3 files</span><br></pre></td></tr></table></figure>

<p>chaincode_wrapper是一个标准的Go用户链码。</p>
<h5 id="cmd-main-go"><a href="#cmd-main-go" class="headerlink" title="cmd/main.go"></a>cmd/main.go</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/hyperledger/fabric/core/chaincode/shim&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/hyperledger/fabric/examples/chaincode/go/chaincode_wrapper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := shim.Start(<span class="built_in">new</span>(chaincode_wrapper.ChaincodeWrapper))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Failed to start chaincode wrapper with error: %s&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>链码的入口main函数，通过shim.Start启动一个ChaincodeWrapper。</p>
<h5 id="chancode-go"><a href="#chancode-go" class="headerlink" title="chancode.go"></a>chancode.go</h5><p><a href="http://116.63.138.80:8080/xref/scripts/open-source-fabric-optee-chaincode/chaincode_wrapper/chaincode.go">chaincode_wrapper/chaincode.go</a></p>
<p>对该文件进行分段分析：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode_wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/hyperledger/fabric/core/chaincode/shim&quot;</span></span><br><span class="line">	grpcpb <span class="string">&quot;github.com/hyperledger/fabric/examples/chaincode/go/chaincode_wrapper/proto&quot;</span></span><br><span class="line">	pb <span class="string">&quot;github.com/hyperledger/fabric/protos/peer&quot;</span></span><br><span class="line">	<span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// stores uuid used by chaincode_proxy to invoke chaincode inside the secure world</span></span><br><span class="line"><span class="keyword">type</span> ChaincodeWrapper <span class="keyword">struct</span> &#123;</span><br><span class="line">	Uuid []<span class="type">byte</span> <span class="comment">// for testing, uuid needs to be accessible outside</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	address = <span class="string">&quot;172.28.10.104:50051&quot;</span>  <span class="comment">//设置目标服务器的IP地址，即chaincode_proxy的ip和端口</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这部分首先导入相关的包，定义了一个ChaincodeWrapper数据结构，用于存储chaincode_proxy调用安全世界的链码的UUID。其次定义了IP地址。</p>
<p>然后定义了Fabric链码的Init和Invoke方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// instantiate chaincode_wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *ChaincodeWrapper)</span></span> Init(stub shim.ChaincodeStubInterface) pb.Response &#123;</span><br><span class="line">	<span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// invoke chaincode_wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *ChaincodeWrapper)</span></span> Invoke(stub shim.ChaincodeStubInterface) pb.Response &#123;</span><br><span class="line">	function, _ := stub.GetFunctionAndParameters()</span><br><span class="line">	<span class="keyword">if</span> function == <span class="string">&quot;setup&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> t.setup(stub)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> t.invoke(stub)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Init方法是链码初始化的方法，而Invoke是链码调用方法。在Invoke函数中提供了两个方法——setup和invoke。</p>
<ul>
<li>setup：获取uuid并将其保存在t.Uuid中以便invoke使用</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store uuid in ChaincodeWrapper</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *ChaincodeWrapper)</span></span> setup(stub shim.ChaincodeStubInterface) pb.Response &#123;</span><br><span class="line">    <span class="comment">// 获取输入参数（uuid），并检查参数数量(1个)</span></span><br><span class="line">	_, args := stub.GetFunctionAndParameters()</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(<span class="string">&quot;Failed to invoke setup function of chaincode_wrapper with error: incorrect number of args, expecting 1 arg (uuid).&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将该参数读取到uuidInput变量</span></span><br><span class="line">	uuidInput := args[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将uudiInput存储到t.UUid</span></span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	t.Uuid, err = hex.DecodeString(uuidInput)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(fmt.Sprintf(<span class="string">&quot;Failed to invoke setup function of chaincode_wrapper with error: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>invoke：该函数首先与proxy建立grpc链接，然后将事务调用封装wrapperMsg后发送至proxy，接着等待proxy返回的应答：</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过gRPC将调用转发到chaincode_wrapper，处理GetStateRequest和PutStateRequest，最后接收InvocationResponse</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *ChaincodeWrapper)</span></span> invoke(stub shim.ChaincodeStubInterface) pb.Response &#123;</span><br><span class="line">	<span class="comment">// 获取输入参数，并检查参数数量</span></span><br><span class="line">	function, args := stub.GetFunctionAndParameters()</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(<span class="string">&quot;Failed to invoke chaincode_wrapper with error: incorrect number of args, expecting at least name of function to execute&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置grpc服务器连接对chaincode_proxy</span></span><br><span class="line">	conn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close() <span class="comment">// 最后关闭连接</span></span><br><span class="line">	client := grpcpb.NewInvocationClient(conn) </span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置上下文超时.</span></span><br><span class="line">	<span class="comment">// 超时后，gRPC调用TransactionInvocation的启动以及任何发送或接收都将失败，并出现错误。此错误被清理捕获。</span></span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(<span class="number">10</span>)*time.Minute) <span class="comment">// chaincode_wrapper最多等待10分钟，等待gRPC完成。</span></span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// create the grpc client stream</span></span><br><span class="line">	stream, err := client.TransactionInvocation(ctx) <span class="comment">// 如果没有超时，则执行client.TransactionInvocation（context.Background（））（未使用）</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 准备事务调用并将其发送到chaincode_proxy</span></span><br><span class="line">	wrapperMsg := &amp;grpcpb.ChaincodeWrapperMessage&#123;</span><br><span class="line">		MessageOneof: &amp;grpcpb.ChaincodeWrapperMessage_InvocationRequest&#123;</span><br><span class="line">			InvocationRequest: &amp;grpcpb.InvocationRequest&#123;</span><br><span class="line">				FunctionName:  function,</span><br><span class="line">				ChaincodeUuid: t.Uuid,</span><br><span class="line">				Arguments:     args,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	err = stream.Send(wrapperMsg)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;  <span class="comment">// 等待chaincode_proxy的消息并相应地采取行动</span></span><br><span class="line">		proxyMsg, err := stream.Recv()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> u := proxyMsg.Type.(<span class="keyword">type</span>) &#123;  <span class="comment">//根据类型处理，下面详细分析</span></span><br><span class="line">		<span class="keyword">case</span> *grpcpb.ChaincodeProxyMessage_InvocationResponse:</span><br><span class="line">			&#123; ...  &#125;</span><br><span class="line">		<span class="keyword">case</span> *grpcpb.ChaincodeProxyMessage_GetStateRequest:</span><br><span class="line">			&#123; ...  &#125;</span><br><span class="line">		<span class="keyword">case</span> *grpcpb.ChaincodeProxyMessage_PutStateRequest:</span><br><span class="line">			&#123; ...  &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应答根据类型分为以下几种，并对应不同的处理：</p>
<ul>
<li><p><strong>grpcpb.ChaincodeProxyMessage_InvocationResponse</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> *grpcpb.ChaincodeProxyMessage_InvocationResponse:</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//从chaincode_proxy读取InvocationResponse gRPC消息的执行响应</span></span><br><span class="line">				executionResponse := u.InvocationResponse.ExecutionResponse</span><br><span class="line">				<span class="keyword">return</span> shim.Success([]<span class="type">byte</span>(executionResponse))</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>grpcpb.ChaincodeProxyMessage_GetStateRequest</strong></p>
<p>从账本读取状态，转化为字符串，打包为消息，发送给proxy。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> *grpcpb.ChaincodeProxyMessage_GetStateRequest:</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//从chaincode_proxy读取GetStateRequest gRPC消息的密钥</span></span><br><span class="line">				key := u.GetStateRequest.Key</span><br><span class="line"></span><br><span class="line">				<span class="comment">//从帐本中获取状态</span></span><br><span class="line">				value, err := stub.GetState(key)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//将返回状态转换为字符串</span></span><br><span class="line">				<span class="keyword">var</span> valueString <span class="type">string</span></span><br><span class="line">				<span class="keyword">if</span> value == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">//由于nil在go中不是有效的字符串类型,我们传递一个空字符串作为Value，以防GetState返回的值为nil</span></span><br><span class="line">					valueString = <span class="string">&quot;&quot;</span></span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					valueString = <span class="type">string</span>(value)</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 为chaincode_proxy创建并发送putStateResponse gRPC消息</span></span><br><span class="line">				wrapperMsg := &amp;grpcpb.ChaincodeWrapperMessage&#123;</span><br><span class="line">					MessageOneof: &amp;grpcpb.ChaincodeWrapperMessage_GetStateResponse&#123;</span><br><span class="line">						GetStateResponse: &amp;grpcpb.GetStateResponse&#123;</span><br><span class="line">							Value: valueString,</span><br><span class="line">						&#125;,</span><br><span class="line">					&#125;,</span><br><span class="line">				&#125;</span><br><span class="line">				err = stream.Send(wrapperMsg)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>grpcpb.ChaincodeProxyMessage_PutStateRequest</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> *grpcpb.ChaincodeProxyMessage_PutStateRequest:</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 从chaincode_proxy读取PutStateRequest gRPC消息的密钥和值</span></span><br><span class="line">				key := u.PutStateRequest.Key</span><br><span class="line">				value := u.PutStateRequest.Value</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 将状态记入账本</span></span><br><span class="line">				err = stub.PutState(key, []<span class="type">byte</span>(value))</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 为chaincode_proxy创建并发送putStateResponse gRPC消息</span></span><br><span class="line">				wrapperMsg := &amp;grpcpb.ChaincodeWrapperMessage&#123;</span><br><span class="line">					MessageOneof: &amp;grpcpb.ChaincodeWrapperMessage_PutStateResponse&#123;</span><br><span class="line">						PutStateResponse: &amp;grpcpb.PutStateResponse&#123;</span><br><span class="line">							Acknowledgement: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">						&#125;,</span><br><span class="line">					&#125;,</span><br><span class="line">				&#125;</span><br><span class="line">				err := stream.Send(wrapperMsg)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="proto-invocation-proto"><a href="#proto-invocation-proto" class="headerlink" title="/proto/invocation.proto"></a>/proto/invocation.proto</h5><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> invocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Invocation</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> TransactionInvocation (stream ChaincodeWrapperMessage) <span class="keyword">returns</span> (stream ChaincodeProxyMessage) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ChaincodeWrapperMessage</span> &#123;</span><br><span class="line">  <span class="keyword">oneof</span> message_oneof &#123;</span><br><span class="line">	InvocationRequest invocation_request = <span class="number">1</span>;</span><br><span class="line">	GetStateResponse get_state_response = <span class="number">2</span>;</span><br><span class="line">	PutStateResponse put_state_response = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">InvocationRequest</span> &#123;</span><br><span class="line">  <span class="type">bytes</span> chaincode_uuid = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> function_name = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">string</span> arguments = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">GetStateResponse</span> &#123;</span><br><span class="line">  <span class="type">string</span> value = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">PutStateResponse</span> &#123;</span><br><span class="line">  <span class="type">string</span> acknowledgement = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">ChaincodeProxyMessage</span> &#123;</span><br><span class="line">  <span class="keyword">oneof</span> type &#123;</span><br><span class="line">      InvocationResponse invocation_response = <span class="number">1</span>;</span><br><span class="line">      GetStateRequest get_state_request = <span class="number">2</span>;</span><br><span class="line">      PutStateRequest put_state_request = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">InvocationResponse</span> &#123;</span><br><span class="line">  <span class="type">string</span> execution_response = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">GetStateRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> key = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">PutStateRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> key = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> value = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="chaincode-proxy"><a href="#chaincode-proxy" class="headerlink" title="chaincode_proxy"></a>chaincode_proxy</h4><p>chaincode_proxy是C++编写的CA应用，负责启动一个grpc server。代码结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Android.mk</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── host</span><br><span class="line">│   ├── chaincode_proxy.cpp</span><br><span class="line">│   ├── chaincode_tee_ree_communication.h</span><br><span class="line">│   ├── invocation.proto</span><br><span class="line">│   └── Makefile</span><br><span class="line">└── Makefile</span><br></pre></td></tr></table></figure>

<h5 id="host-chaincode-proxy-cpp"><a href="#host-chaincode-proxy-cpp" class="headerlink" title="/host/chaincode_proxy.cpp"></a>/host/chaincode_proxy.cpp</h5><p>这个文件是C++编写的，先看主函数通过run_server()启动了一个grpc服务器。</p>
<p>定义，这里定义了一系列grpc命名空间内的引用，在部署时要将gRPC的相关库链接到/host/include里，以供调用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> grpc::Server;</span><br><span class="line"><span class="keyword">using</span> grpc::ServerBuilder;</span><br><span class="line"><span class="keyword">using</span> grpc::ServerContext;</span><br><span class="line"><span class="keyword">using</span> grpc::ServerReaderWriter;</span><br><span class="line"><span class="keyword">using</span> grpc::Status;</span><br><span class="line"><span class="keyword">using</span> invocation::ChaincodeProxyMessage;</span><br><span class="line"><span class="keyword">using</span> invocation::ChaincodeWrapperMessage;</span><br><span class="line"><span class="keyword">using</span> invocation::GetStateRequest;</span><br><span class="line"><span class="keyword">using</span> invocation::PutStateRequest;</span><br><span class="line"><span class="keyword">using</span> invocation::InvocationResponse;</span><br><span class="line"><span class="keyword">using</span> invocation::Invocation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* declare static functions */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">run_server</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cleanup</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>main</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* catch Ctrl+C keyboard event to cleanup (kill gRPC server) */</span></span><br><span class="line">	<span class="built_in">signal</span>(SIGINT, cleanup);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* start the gRPC server stream and</span></span><br><span class="line"><span class="comment">	* handle incoming transaction invocation</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">run_server</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>run_server</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标准的grpc server启动流程</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">run_server</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* 创建服务器，添加侦听端口并注册服务*/</span></span><br><span class="line">	<span class="function">std::string <span class="title">server_address</span><span class="params">(<span class="string">&quot;0.0.0.0:50051&quot;</span>)</span></span>;</span><br><span class="line">	InvocationImpl service;  <span class="comment">// 核心服务逻辑，见下面分析</span></span><br><span class="line">	ServerBuilder builder;   <span class="comment">// 定义于grpc库内</span></span><br><span class="line">	builder.<span class="built_in">AddListeningPort</span>(server_address, grpc::<span class="built_in">InsecureServerCredentials</span>());</span><br><span class="line">	builder.<span class="built_in">RegisterService</span>(&amp;service);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 启动服务器 */</span></span><br><span class="line">	<span class="function">std::unique_ptr&lt;Server&gt; <span class="title">server</span><span class="params">(builder.BuildAndStart())</span></span>;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;...chaincode_proxy is listening at &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	* 让gRPC服务器流运行并处理传入的事务调用直到它被关闭或被杀死</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	server-&gt;<span class="built_in">Wait</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>InvocationImpl</strong></p>
<p>该类继承于Invocation::Service，并被设定为final方法，意味着该类不能再被继承。类中定义了6个静态方法和一个，下面会依次介绍：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InvocationImpl</span> <span class="keyword">final</span> : <span class="keyword">public</span> Invocation::Service</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">set_uuid</span><span class="params">(ChaincodeWrapperMessage *wrapper_msg, TEEC_UUID *uuid)</span></span></span><br><span class="line"><span class="function">	</span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">set_args</span><span class="params">(ChaincodeWrapperMessage *wrapper_msg, <span class="keyword">struct</span> arguments *arguments_data)</span></span></span><br><span class="line"><span class="function">	</span>&#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">set_function</span><span class="params">(ChaincodeWrapperMessage *wrapper_msg, <span class="type">char</span> *function, TEEC_Operation *op)</span></span></span><br><span class="line"><span class="function">	</span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">handle_invocation_response</span><span class="params">(TEEC_Operation *op, ServerReaderWriter&lt;ChaincodeProxyMessage, ChaincodeWrapperMessage&gt; *stream )</span></span></span><br><span class="line"><span class="function">	</span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">handle_get_state_request</span><span class="params">(TEEC_Operation *op, ServerReaderWriter&lt;ChaincodeProxyMessage, ChaincodeWrapperMessage&gt; *stream, TEEC_SharedMemory *data)</span></span></span><br><span class="line"><span class="function">	</span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">handle_put_state_request</span><span class="params">(TEEC_Operation *op, ServerReaderWriter&lt;ChaincodeProxyMessage, ChaincodeWrapperMessage&gt; *stream,  TEEC_SharedMemory *data)</span></span></span><br><span class="line"><span class="function">	</span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">Status <span class="title">TransactionInvocation</span><span class="params">(ServerContext *context, ServerReaderWriter&lt;ChaincodeProxyMessage, ChaincodeWrapperMessage&gt; *stream)</span> <span class="keyword">override</span> <span class="comment">//用于双向流调用的同步（阻塞）服务器端 API，其中来自客户端的传入消息流具有 ChaincodeWrapperMessage 类型的消息，来自服务器的传出消息流具有 ChaincodeProxyMessage 类型的消息。 https://grpc.github.io/grpc/cpp/classgrpc_1_1_server_reader_writer.html</span></span></span><br><span class="line"><span class="function">	</span>&#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>TransactionInvocation</strong>（主流程）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">TransactionInvocation</span><span class="params">(ServerContext *context, ServerReaderWriter&lt;ChaincodeProxyMessage, ChaincodeWrapperMessage&gt; *stream)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">/* declare variables used within one gRPC chaincode_wrapper - chaincode_proxy stream */</span></span><br><span class="line">		TEEC_Context ctx;</span><br><span class="line">		TEEC_Result res = TEEC_SUCCESS;</span><br><span class="line">		TEEC_Session sess;</span><br><span class="line">		TEEC_Operation op;</span><br><span class="line">		TEEC_UUID uuid; </span><br><span class="line">		TEEC_SharedMemory data;</span><br><span class="line">		<span class="type">uint32_t</span> err_origin;</span><br><span class="line">		<span class="type">bool</span> success = <span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/* read invocation message */</span></span><br><span class="line">		ChaincodeWrapperMessage wrapper_msg;</span><br><span class="line">		success = stream-&gt;<span class="built_in">Read</span>(&amp;wrapper_msg);</span><br><span class="line">		<span class="keyword">if</span>(!success) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">Status</span>(grpc::StatusCode::UNKNOWN, <span class="string">&quot;&quot;</span>);  </span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* set UUID */</span></span><br><span class="line">		<span class="built_in">set_uuid</span>(&amp;wrapper_msg, &amp;uuid);</span><br><span class="line"></span><br><span class="line">		res = <span class="built_in">TEEC_InitializeContext</span>(<span class="literal">NULL</span>, &amp;ctx);</span><br><span class="line">		<span class="keyword">if</span> (res != TEEC_SUCCESS) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">Status</span>(grpc::StatusCode::UNKNOWN, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/* open session towards chaincode */</span></span><br><span class="line">		res = <span class="built_in">TEEC_OpenSession</span>(&amp;ctx, &amp;sess, &amp;uuid, TEEC_LOGIN_PUBLIC, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;err_origin);</span><br><span class="line">		<span class="keyword">if</span> (res != TEEC_SUCCESS) &#123;</span><br><span class="line">			<span class="built_in">TEEC_FinalizeContext</span>(&amp;ctx);</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">Status</span>(grpc::StatusCode::UNKNOWN, <span class="string">&quot;failed to open session&quot;</span>); </span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		* define the types of the parameters</span></span><br><span class="line"><span class="comment">	 	* - first parameter (shared memory): </span></span><br><span class="line"><span class="comment">		* contains the function to execute inside the chaincode</span></span><br><span class="line"><span class="comment">	 	* - second paramter (parameter value uint32_t): </span></span><br><span class="line"><span class="comment">		* used to pass the type of message (final result, getState or putState) from the chaincode to this chaincode_proxy</span></span><br><span class="line"><span class="comment">		* type uint32_t allows switch statement inside chaincode_proxy</span></span><br><span class="line"><span class="comment">	 	* - third parameter (shared memory): </span></span><br><span class="line"><span class="comment">		* used to transfer data (arguments, key for GetState, key-value for PutState, result of GetState, result PutState, final result)</span></span><br><span class="line"><span class="comment">	 	* - fourth parameter: </span></span><br><span class="line"><span class="comment">		* unused</span></span><br><span class="line"><span class="comment">	 	*/</span></span><br><span class="line">		<span class="built_in">memset</span>(&amp;op, <span class="number">0</span>, <span class="built_in">sizeof</span>(op));</span><br><span class="line">		op.paramTypes = <span class="built_in">TEEC_PARAM_TYPES</span>(TEEC_MEMREF_TEMP_INPUT, TEEC_VALUE_OUTPUT, TEEC_MEMREF_WHOLE, TEEC_NONE);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* allocate shared memory used for second paramter */</span></span><br><span class="line">		<span class="type">size_t</span> structure_sizes[] = &#123; <span class="built_in">sizeof</span>(<span class="keyword">struct</span> key_value), <span class="built_in">sizeof</span>(<span class="keyword">struct</span> acknowledgement), <span class="built_in">sizeof</span>(<span class="keyword">struct</span> invocation_response), <span class="built_in">sizeof</span>(<span class="keyword">struct</span> arguments) &#125;;</span><br><span class="line">		data.size = *std::<span class="built_in">max_element</span>(std::<span class="built_in">begin</span>(structure_sizes), std::<span class="built_in">end</span>(structure_sizes));</span><br><span class="line">		data.flags = TEEC_MEM_INPUT | TEEC_MEM_OUTPUT;</span><br><span class="line">		res = <span class="built_in">TEEC_AllocateSharedMemory</span>(&amp;ctx, &amp;data);</span><br><span class="line">		<span class="keyword">if</span> (res != TEEC_SUCCESS) &#123;</span><br><span class="line">			<span class="built_in">TEEC_CloseSession</span>(&amp;sess);</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">Status</span>(grpc::StatusCode::UNKNOWN, <span class="string">&quot;failed to allocate shared memory&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		op.params[<span class="number">2</span>].memref.parent = &amp;data;</span><br><span class="line">		<span class="built_in">memset</span>(data.buffer, <span class="number">0</span>, data.size);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* set first parameter: function name */</span></span><br><span class="line">		<span class="type">char</span> *function;</span><br><span class="line">		function = (<span class="type">char</span> *)<span class="built_in">calloc</span>(FCT_SIZE, <span class="built_in">sizeof</span>(<span class="type">char</span>)); </span><br><span class="line">		success = <span class="built_in">set_function</span>(&amp;wrapper_msg, function, &amp;op);</span><br><span class="line">		<span class="keyword">if</span>(!success)&#123;</span><br><span class="line">			<span class="built_in">TEEC_CloseSession</span>(&amp;sess);</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">Status</span>(grpc::StatusCode::INVALID_ARGUMENT, <span class="string">&quot;invalid size of function&quot;</span>); </span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* set third parameter: arguments */</span></span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">arguments</span> *arguments_data;</span><br><span class="line">		arguments_data  = (<span class="keyword">struct</span> arguments *)data.buffer; </span><br><span class="line">		success = <span class="built_in">set_args</span>(&amp;wrapper_msg, arguments_data);</span><br><span class="line">		<span class="keyword">if</span>(!success)&#123;</span><br><span class="line">			<span class="keyword">goto</span> cleanup;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* </span></span><br><span class="line"><span class="comment">		* call chaincode inside OP-TEE</span></span><br><span class="line"><span class="comment">		* TA_CHAINCODE_CMD_INIT_INVOKE indicates that any old context inside the chaincode TA must be cleared </span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		res = <span class="built_in">TEEC_InvokeCommand</span>(&amp;sess, TA_CHAINCODE_CMD_INIT_INVOKE, &amp;op, &amp;err_origin);</span><br><span class="line">		<span class="keyword">if</span> (res != TEEC_SUCCESS) &#123;</span><br><span class="line">			<span class="keyword">goto</span> cleanup;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		* read the return type stored in the second paramter by the chaincode: invocation response, get state request or put state request</span></span><br><span class="line"><span class="comment">		* - in case of an invocation response, the chaincode_proxy forwards this response to the chaincode_wrapper, leaves the loop and closes the stream</span></span><br><span class="line"><span class="comment">		* - in case of a get state request, the chaincode_proxy forwards the request to the chaincode_wrapper, </span></span><br><span class="line"><span class="comment">		*   waits for the response, writes the response to the shared memory, invokes the chaincode again and restarts the loop</span></span><br><span class="line"><span class="comment">		* - in case of a put state request, the chaincode_proxy forwards the request to the chaincode_wrapper,</span></span><br><span class="line"><span class="comment">		*   waits for the response, writes the response to the shared memory, invokes the chaincode again and restarts the loop </span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">switch</span>(op.params[<span class="number">1</span>].value.a) &#123;</span><br><span class="line">				<span class="keyword">case</span> INVOCATION_RESPONSE: &#123;</span><br><span class="line">					success = <span class="built_in">handle_invocation_response</span>(&amp;op, stream);</span><br><span class="line">					<span class="keyword">goto</span> cleanup;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> GET_STATE_REQUEST: &#123;</span><br><span class="line">					success = <span class="built_in">handle_get_state_request</span>(&amp;op, stream, &amp;data);</span><br><span class="line">					<span class="keyword">if</span>(!success)&#123;</span><br><span class="line">						<span class="keyword">goto</span> cleanup;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> PUT_STATE_REQUEST: &#123;</span><br><span class="line">					success = <span class="built_in">handle_put_state_request</span>(&amp;op, stream, &amp;data);</span><br><span class="line">					<span class="keyword">if</span>(!success)&#123;</span><br><span class="line">						<span class="keyword">goto</span> cleanup;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> ERROR: &#123;</span><br><span class="line">					success = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">goto</span> cleanup;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">default</span>: &#123;	</span><br><span class="line">					success = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">goto</span> cleanup;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">/* </span></span><br><span class="line"><span class="comment">			* call chaincode inside OP-TEE</span></span><br><span class="line"><span class="comment">			* TA_CHAINCODE_CMD_RESUME_INVOKE indicates that the chaincode execution in the chaincode TA must be resumed based on the stored context </span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			res = <span class="built_in">TEEC_InvokeCommand</span>(&amp;sess, TA_CHAINCODE_CMD_RESUME_INVOKE, &amp;op, &amp;err_origin);</span><br><span class="line">			<span class="keyword">if</span> (res != TEEC_SUCCESS) &#123;</span><br><span class="line">				<span class="keyword">goto</span> cleanup;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	cleanup: </span><br><span class="line">		<span class="built_in">free</span>(function);</span><br><span class="line">		<span class="built_in">TEEC_ReleaseSharedMemory</span>(&amp;data);</span><br><span class="line">		<span class="built_in">TEEC_CloseSession</span>(&amp;sess);</span><br><span class="line">		<span class="built_in">TEEC_FinalizeContext</span>(&amp;ctx);</span><br><span class="line">		<span class="keyword">if</span>(res != TEEC_SUCCESS || !success)&#123;</span><br><span class="line">			<span class="comment">/* signalize that stream has unsuccessfully finished, returns the boolean false in read/write process of chaincode_wrapper */</span></span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">Status</span>(grpc::StatusCode::UNKNOWN, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/* signalize that invocation has been finished */</span>	</span><br><span class="line">		<span class="keyword">return</span> Status::OK;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>set_uuid</strong></p>
<p>该方法获取ChaincodeWrapper的消息，即wrapper_msg，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* write the uuid received from the chaincode_wrapper to the shared memory */</span></span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">set_uuid</span><span class="params">(ChaincodeWrapperMessage *wrapper_msg, TEEC_UUID *uuid)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::string chaincode_uuid = wrapper_msg-&gt;<span class="built_in">invocation_request</span>().<span class="built_in">chaincode_uuid</span>();</span><br><span class="line">		uuid-&gt;clockSeqAndNode[<span class="number">0</span>] = chaincode_uuid[<span class="number">8</span>];</span><br><span class="line">		uuid-&gt;clockSeqAndNode[<span class="number">1</span>] = chaincode_uuid[<span class="number">9</span>];</span><br><span class="line">		uuid-&gt;clockSeqAndNode[<span class="number">2</span>] = chaincode_uuid[<span class="number">10</span>];</span><br><span class="line">		uuid-&gt;clockSeqAndNode[<span class="number">3</span>] = chaincode_uuid[<span class="number">11</span>];</span><br><span class="line">		uuid-&gt;clockSeqAndNode[<span class="number">4</span>] = chaincode_uuid[<span class="number">12</span>];</span><br><span class="line">		uuid-&gt;clockSeqAndNode[<span class="number">5</span>] = chaincode_uuid[<span class="number">13</span>];</span><br><span class="line">		uuid-&gt;clockSeqAndNode[<span class="number">6</span>] = chaincode_uuid[<span class="number">14</span>];</span><br><span class="line">		uuid-&gt;clockSeqAndNode[<span class="number">7</span>] = chaincode_uuid[<span class="number">15</span>];</span><br><span class="line">		uuid-&gt;timeLow = (chaincode_uuid[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (chaincode_uuid[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (chaincode_uuid[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (chaincode_uuid[<span class="number">3</span>]);</span><br><span class="line">		uuid-&gt;timeMid = (chaincode_uuid[<span class="number">4</span>] &lt;&lt; <span class="number">8</span>) | (chaincode_uuid[<span class="number">5</span>]);</span><br><span class="line">		uuid-&gt;timeHiAndVersion = (chaincode_uuid[<span class="number">6</span>] &lt;&lt; <span class="number">8</span>) | (chaincode_uuid[<span class="number">7</span>]);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="chaincode"><a href="#chaincode" class="headerlink" title="chaincode"></a>chaincode</h4><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="chaincode-proxy（Qemu）"><a href="#chaincode-proxy（Qemu）" class="headerlink" title="chaincode_proxy（Qemu）"></a>chaincode_proxy（Qemu）</h3><h4 id="安装optee"><a href="#安装optee" class="headerlink" title="安装optee"></a>安装optee</h4><p>先安装好optee（qemu），利用install-optee.sh脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 install-optee.sh </span><br><span class="line"></span><br><span class="line">sudo ./install-optee.sh prerequisites</span><br><span class="line">sudo ./install-optee.sh install_repo</span><br><span class="line">sudo ./install-optee.sh get_source_code</span><br><span class="line">sudo ./install-optee.sh get_toolchains</span><br></pre></td></tr></table></figure>

<p>参考这篇博客做一下：</p>
<p><a href="https://blog.csdn.net/weixin_44728238/article/details/104625347">(86条消息) OP-TEE的安装_optee_大白羊想学习的博客-CSDN博客</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install android-tools-adb android-tools-fastboot autoconf automake bc bison build-essential ccache cscope curl device-tree-compiler expect flex ftp-upload gdisk iasl libattr1-dev libc6:i386 libcap-dev libfdt-dev libftdi-dev libglib2.0-dev libhidapi-dev libncurses5-dev libpixman-1-dev libssl-dev libstdc++6:i386 libtool libz1:i386 make mtools netcat python-crypto python3-crypto python-pyelftools</span><br><span class="line">python3-pyelftools python-serial python3-serial rsync unzip uuid-dev xdg-utils xterm xz-utils zlib1g-dev -y</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo init -u https://github.com/OP-TEE/manifest.git -m qemu_v8.xml -b 3.5.0 --repo-url=https://mirrors.tuna.tsinghua.edu.cn/git/git-repo</span><br></pre></td></tr></table></figure>





<p>为了省略网络问题并获得chaincode_proxy的ip，我们需要在物理主机和QEMU模拟的机器之间创建一个双向网桥。首先，在主机中使用up作为sudo执行<strong>qemu_br_tap.sh</strong>脚本。确保用正确的值替换IFDEV=“ensX”中的X和GATEWAY=“ip_address”中的ip_address。您可以通过在主机上运行$ip addr show来查找第一个值，第二个值指的是（IUUN集群的）子网。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./qemu_br_tap.sh up</span><br></pre></td></tr></table></figure>

<p>其次，您还需要修改${OPTEE_SRC}/build/common.mk（再次在主机中），如下框中所示。通过这些更改，您可以解除GDB服务器和SLIRP网络的连接。此外，您还可以声明TAP设备的名称（与qemu_br_TAP.sh中的名称相同），并为该TAP设备定义一个随机MAC地址。QEMU_EXTRA_ARGS最终确保了桥接网络的设置。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ifeq ($(GDBSERVER),y)</span></span><br><span class="line"><span class="comment">#HOSTFWD := ,hostfwd=tcp::12345-:12345</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment"># Enable QEMU SLiRP user networking</span></span><br><span class="line"><span class="comment">#QEMU_EXTRA_ARGS +=\</span></span><br><span class="line"><span class="comment">#        -netdev user,id=vmnic$(HOSTFWD) -device virtio-net-device,netdev=vmnic</span></span><br><span class="line">GUEST_TAP_NAME ?= tap2</span><br><span class="line">GUEST_MAC_ADDR ?= 02:16:1e:02:01:02</span><br><span class="line">QEMU_EXTRA_ARGS += \</span><br><span class="line">        -device virtio-net-device,mac=<span class="variable">$(GUEST_MAC_ADDR)</span>,netdev=vmnic \</span><br><span class="line">        -netdev tap,id=vmnic,ifname=<span class="variable">$(GUEST_TAP_NAME)</span>,script=no,downscript=no</span><br></pre></td></tr></table></figure>

<p>要使更改生效，请在 <code>$&#123;OPTEE_SRC&#125;/build</code>目录运行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make clean; make linux-clean; make buildroot-clean; make qemu-clean;</span><br><span class="line">make -j$(nproc)</span><br></pre></td></tr></table></figure>

<p>将gRPC交叉编译为静态库，可以使用脚本<a href="#install-grpc.sh"><strong>install-gRPC.sh</strong></a>执行该步骤。</p>
<h4 id="Build-chaincode-proxy"><a href="#Build-chaincode-proxy" class="headerlink" title="Build chaincode_proxy"></a><strong>Build chaincode_proxy</strong></h4><p>然后签出此存储库，并从chaincode_proxy目录创建一个符号链接到${OPTEE_SRC}/optie_examples/（使用绝对路径！请确保OPTEE_examples中的chaincode.proxy目录还不存在）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s $&#123;REPO&#125;/chaincode_proxy/  $&#123;OPTEEP_SRC&#125;/optee_examples/chaincode_proxy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">gzh</span></span><br><span class="line">ln -s /home/gzh/open-source-fabric-optee-chaincode/chaincode_proxy/  /home/gzh/optee/optee_examples/chaincode_proxy</span><br></pre></td></tr></table></figure>

<p>将所有与gRPC相关的头文件（可能在/usr/local/include中）复制到<code>$&#123;OPTEE_SRC&#125;/OPTEE_examples/chaincode_proxy/host/include</code>目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r /usr/local/include  /home/gzh/optee/optee_examples/chaincode_proxy/host/include</span><br></pre></td></tr></table></figure>

<p>确保在<code>$&#123;OPTEE_SRC&#125;/optee_examples/chaincode_proxy/CMakelists.txt</code>中正确设置了gRPC静态库的包含路径。</p>
<p>在${OPTEEP_SRC}/opte_examples/chaincode_proxy/host中运行（命令源：<a href="https://github.com/grpc/grpc">https://github.com/grpc/grpc</a>):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grpc_cpp_plugin=$(which grpc_cpp_plugin)</span><br><span class="line">protoc -I . --grpc_out=. --plugin=protoc-gen-grpc=$grpc_cpp_plugin invocation.proto</span><br><span class="line">protoc -I . --cpp_out=. invocation.proto</span><br></pre></td></tr></table></figure>

<p>要使更改生效，请在 <code>$&#123;OPTEE_SRC&#125;/build</code>目录运行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make clean; make linux-clean; make buildroot-clean; make qemu-clean;</span><br><span class="line">make clean &amp;&amp; make linux-clean &amp;&amp; make buildroot-clean &amp;&amp; make qemu-clean;</span><br><span class="line">make -j$(nproc)</span><br></pre></td></tr></table></figure>

<h4 id="Build-chaincode"><a href="#Build-chaincode" class="headerlink" title="Build chaincode"></a><strong>Build chaincode</strong></h4><p>Checkout此存储库，并从chaincode目录创建一个符号链接到<code>$｛OPTEE_SRC｝/optie_examples/</code>（使用绝对路径！请确保OPTEE_examples中的chaincode dir还不存在）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s $&#123;REPO&#125;/chaincode/  $&#123;OPTEEP_SRC&#125;/optee_examples/chaincode</span><br><span class="line"></span><br><span class="line">ln -s /home/gzh/open-source-fabric-optee-chaincode/chaincode/   /home/gzh/optee/optee_examples/chaincode</span><br></pre></td></tr></table></figure>

<p>要使更改生效，请在 <code>$&#123;OPTEE_SRC&#125;/build</code>目录运行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make clean; make linux-clean; make buildroot-clean; make qemu-clean;</span><br><span class="line">make -j$(nproc)</span><br></pre></td></tr></table></figure>



<h3 id="链码操作"><a href="#链码操作" class="headerlink" title="链码操作"></a>链码操作</h3><p>启动order</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/gzh/go/src/github.com/hyperledger/fabric/sampleconfig </span><br><span class="line">sudo ORDERER_GENERAL_GENESISPROFILE=SampleDevModeSolo ../.build/bin/orderer</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052 ../.build/bin/peer node start</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ../.build/bin/configtxgen -channelID ch -outputCreateChannelTx ch.tx -profile SampleSingleMSPChannel</span><br><span class="line">../.build/bin/peer channel create -o 127.0.0.1:7050 -c ch -f ch.tx</span><br><span class="line">../.build/bin/peer channel join -b ch.block</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../.build/bin/peer chaincode install -n coffee_tracking_chaincode_wrapper -v 0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_wrapper/cmd</span><br><span class="line">../.build/bin/peer chaincode instantiate -n coffee_tracking_chaincode_wrapper -v 0 -c &#x27;&#123;&quot;Args&quot;:[&quot;init&quot;]&#125;&#x27; -o 127.0.0.1:7050 -C ch</span><br><span class="line">../.build/bin/peer chaincode invoke -n coffee_tracking_chaincode_wrapper -c &#x27;&#123;&quot;Args&quot;:[&quot;setup&quot;,&quot;6ceb95bae9b1482aa1bda1ebca0671b9&quot;]&#125;&#x27; -o 127.0.0.1:7050 -C ch</span><br><span class="line">../.build/bin/peer chaincode invoke -n coffee_tracking_chaincode_wrapper -c &#x27;&#123;&quot;Args&quot;:[&quot;create&quot;,&quot;peter&quot;, &quot;0&quot;]&#125;&#x27; -o 127.0.0.1:7050 -C ch</span><br></pre></td></tr></table></figure>





<h3 id="从头搭建"><a href="#从头搭建" class="headerlink" title="从头搭建"></a>从头搭建</h3><p>需要依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">sudo apt install vim</span><br><span class="line">sudo apt install tree</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置root密码</span></span><br><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>

<p>下载项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/piachristel/open-source-fabric-optee-chaincode</span><br></pre></td></tr></table></figure>

<h4 id="chaincode-wrapper-1"><a href="#chaincode-wrapper-1" class="headerlink" title="chaincode_wrapper"></a>chaincode_wrapper</h4><h5 id="安装Fabric"><a href="#安装Fabric" class="headerlink" title="安装Fabric"></a>安装Fabric</h5><p>首先安装fabric，可以使用脚本install-fabric.sh，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./install-fabric.sh remaining_prerequisites</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置用户docker权限</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">设置root密码</span></span><br><span class="line">	sudo passwd root</span><br><span class="line">	su</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">root用户下执行命令</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">2、若提示不存在docker用户组，则新建一个docker组</span></span><br><span class="line">	groupadd docker</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">1、xxx为想要添加到docker用户组的普通用户</span></span><br><span class="line">	usermod -a -G docker gzh</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">3、重新加载服务配置文件并重启docker</span></span><br><span class="line">	systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"></span><br><span class="line">sudo ./install-fabric.sh cMake</span><br><span class="line">sudo ./install-fabric.sh go #第一次安装一定要把第38行的rm -r /usr/local/go || exit 1注释了</span><br><span class="line">sudo ./install-fabric.sh fabric</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">遇到change permission of go <span class="built_in">dir</span>用下面的话</span></span><br><span class="line">sudo chown -R gzh ~/go</span><br></pre></td></tr></table></figure>



<p>然后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install protobuf-compiler // probably not necessary</span><br></pre></td></tr></table></figure>





<h3 id="项目github链接"><a href="#项目github链接" class="headerlink" title="项目github链接"></a>项目github链接</h3><p><a href="https://github.com/piachristel/open-source-fabric-optee-chaincode">https://github.com/piachristel/open-source-fabric-optee-chaincode</a></p>
<h4 id="install-fabric-sh"><a href="#install-fabric-sh" class="headerlink" title="install-fabric.sh"></a>install-fabric.sh</h4><p>回去看安装流程（<a href="#%E5%AE%89%E8%A3%85Fabric">安装Fabric</a>），</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Script to install fabric</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bases on installation guidelines of:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://hyperledger-fabric.readthedocs.io/en/release-1.4/CONTRIBUTING.html</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://hyperledger-fabric.readthedocs.io/en/release-1.4/getting_started.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://hyperledger-fabric.readthedocs.io/en/release-1.4/dev-setup/devenv.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://hyperledger-fabric.readthedocs.io/en/release-1.4/prereqs.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://golang.org/doc/install</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://golangtutorial.com/how-to-download-and-install-golang/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://stackoverflow.com/questions/8191459/how-do-i-update-node-js</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Its divided <span class="keyword">in</span> the following sections:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cMake</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">go</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fabric</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Each section can be called with <span class="built_in">source</span> `sudo ~/path/to/script/install-fabric sectionName`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Due to dependencies the sections should be called <span class="keyword">in</span> the order above</span></span><br><span class="line"></span><br><span class="line">cMake() &#123;</span><br><span class="line">echo &quot;Installing cmake...&quot;</span><br><span class="line">sudo apt-get install cmake -qq || exit 1 # make sure that version 3.5.1 or higher is installed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">go() &#123;</span><br><span class="line">echo &quot;Installing go...&quot;</span><br><span class="line">P=$(uname -m)</span><br><span class="line">if ! [[ &quot;$P&quot; = &quot;x86_64&quot; || &quot;$P&quot; = &quot;amd64&quot; || &quot;$P&quot; = &quot;X64&quot; ]];</span><br><span class="line">then</span><br><span class="line">	echo &quot;Wrong type of processor.&quot;</span><br><span class="line">	exit 1</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">wget https://studygolang.com/dl/golang/go1.15.7.linux-amd64.tar.gz</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">tar -zxvf go1.15.7linux-amd64.tar.gz -C /usr/local</span></span><br><span class="line">	wget https://dl.google.com/go/go1.11.4.linux-amd64.tar.gz || exit 1</span><br><span class="line">	rm -r /usr/local/go || exit 1  # remove old version of go if any installed</span><br><span class="line">	tar -xvf go1.11.4.linux-amd64.tar.gz || exit 1</span><br><span class="line">	sudo mv go /usr/local	</span><br><span class="line">	files=&#x27;bashrc profile&#x27;</span><br><span class="line">	for file in $files # TODO: do not export paths if already exported</span><br><span class="line">	do</span><br><span class="line">		echo &#x27;export GOROOT=/usr/local/go&#x27; &gt;&gt; ~/.$file || exit 1</span><br><span class="line">		echo &#x27;export GOPATH=$HOME/go&#x27; &gt;&gt; ~/.$file || exit 1</span><br><span class="line">		echo &#x27;export PATH=$PATH:$GOROOT/bin:$GOPATH/bin&#x27; &gt;&gt; ~/.$file || exit 1</span><br><span class="line">	done</span><br><span class="line">	source ~/.bashrc</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">-----------------------------下面这句话很重要-----------------------------------------------</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">change permission of go <span class="built_in">dir</span>: <span class="built_in">chown</span> -R ubuntu ~/go; never use sudo together with go <span class="built_in">command</span></span></span><br><span class="line">	</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remaining_prerequisites() &#123;</span><br><span class="line">echo &quot;Installing npm and nano...&quot;</span><br><span class="line">sudo apt-get install npm -qq || exit 1</span><br><span class="line">sudo npm install -g n -qq || exit 1</span><br><span class="line">sudo n latest -qq || exit 1</span><br><span class="line">sudo n 8.9.4 -qq || exit 1</span><br><span class="line">sudo npm install npm@5.6.0 -g -qq || exit 1</span><br><span class="line"></span><br><span class="line">echo &quot;Installing docker and docker-compose...&quot;</span><br><span class="line">snap install docker || exit 1</span><br><span class="line"></span><br><span class="line">echo &quot;Print version of python...&quot; # check that correct version of python is installed</span><br><span class="line">dpkg -s python &amp;&gt; /dev/null</span><br><span class="line">if [ $? -ne 0 ];</span><br><span class="line">then</span><br><span class="line">	echo &quot;python not installed&quot;</span><br><span class="line">	exit 1</span><br><span class="line">else</span><br><span class="line">	V=$(python --version)</span><br><span class="line">	echo &quot;$V&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;Installing pip...&quot;</span><br><span class="line">sudo apt-get install python-pip || exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fabric() &#123;</span><br><span class="line">echo &quot;Installing fabric...&quot;</span><br><span class="line">mkdir -p ~/go/src/github.com/hyperledger || exit 1</span><br><span class="line">cd ~/go/src/github.com/hyperledger || exit 1</span><br><span class="line">git clone https://github.com/hyperledger/fabric.git || exit 1</span><br><span class="line">cd fabric || exit 1</span><br><span class="line">git fetch --all --tags --prune || exit 1</span><br><span class="line">git checkout release-1.4 || exit 1</span><br><span class="line">git checkout v1.4.1</span><br><span class="line">sudo chmod 666 /var/run/docker.sock || exit 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">------------------------------配置docker用户组权限------------------------------------------</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">su</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">root用户下执行命令</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">1、xxx为想要添加到docker用户组的普通用户</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">usermod -a -G docker xxx</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">2、若提示不存在docker用户组，则新建一个docker组</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">groupadd docker</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">3、重新加载服务配置文件并重启docker</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">systemctl daemon-reload &amp;&amp; systemctl restart docker</span></span><br><span class="line">make </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;Downloading and updating packages...&quot;</span><br><span class="line">sudo apt-get update -qq || exit 1</span><br><span class="line"></span><br><span class="line">&quot;$@&quot;</span><br><span class="line">exit 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="install-optee-sh"><a href="#install-optee-sh" class="headerlink" title="install-optee.sh"></a>install-optee.sh</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Script to install optee</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bases on installation guidelines of</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://optee.readthedocs.io/building/gits/build.html<span class="comment">#get-and-build-the-solution</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http://mahadevrahul.blogspot.com/2016/02/how-to-set-up-and-run-optee-on-qemu.html</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Its divided <span class="keyword">in</span> the following sections: preqrequisites, install_repo, get_source_code, get_toolchains, build_solution.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Each section can be called with <span class="built_in">source</span> `~/path/to/script/install-optee sectionName`.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Due to dependencies the sections should be called <span class="keyword">in</span> the order above.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Furthermore only one section at once, since some section require parameters.</span></span><br><span class="line"></span><br><span class="line">prerequisites()&#123;</span><br><span class="line">    echo &quot;Installing prerequisites for optee...&quot;</span><br><span class="line">    sudo apt-get install android-tools-adb android-tools-fastboot autoconf \</span><br><span class="line">        automake bc bison build-essential cscope curl device-tree-compiler \</span><br><span class="line">        expect flex ftp-upload gdisk acpica-tools libattr1-dev libdb1-compat tzdata libcap-dev \</span><br><span class="line">        libfdt-dev libftdi-dev libglib2.0-dev libhidapi-dev libncurses5-dev \</span><br><span class="line">        libpixman-1-dev libssl-dev libtool make \</span><br><span class="line">        mtools netcat python-crypto python-serial python-wand unzip uuid-dev \</span><br><span class="line">        xdg-utils xterm xz-utils zlib1g-dev ccache repo || exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_repo()&#123;</span><br><span class="line">    echo &quot;Installing android repo...&quot;</span><br><span class="line">    cd ~ || exit 1</span><br><span class="line">    mkdir -p bin || exit 1</span><br><span class="line">    files=&#x27;bashrc profile&#x27;</span><br><span class="line">    for file in $files</span><br><span class="line">    do</span><br><span class="line">	    if [ -z &quot;$(grep -e ~/bin -e &#x27;~/bin&#x27; -e &#x27;$HOME/bin&#x27; .$file)&quot; ]</span><br><span class="line">	    then</span><br><span class="line">	        echo &#x27;export PATH=$HOME/bin:$PATH&#x27; &gt;&gt; ~/.$file || exit 1</span><br><span class="line">	    fi</span><br><span class="line">    done</span><br><span class="line">    if [ -z &quot;$(echo &quot;$PATH&quot; | grep -e ~/bin -e &#x27;~/bin&#x27; -e &#x27;$HOME/bin&#x27;)&quot; ]</span><br><span class="line">    then</span><br><span class="line">	    export &quot;PATH=$HOME/bin:$PATH&quot; # TODO: fix; does not work</span><br><span class="line">    fi</span><br><span class="line">    curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo || exit 1</span><br><span class="line">    chmod a+x ~/bin/repo || exit 1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$2</span> is the TARGET and <span class="variable">$3</span> is the branch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">see: https://optee.readthedocs.io/building/gits/build.html<span class="comment">#current-version for targets</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or: https://github.com/OP-TEE/manifest <span class="keyword">for</span> available actualized targets</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and 3.5.0 as branch (latest); <span class="keyword">do</span> not use 3.3; it is broken!</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">QEMU v7 is Armv7-A (32bit), QEMU v8 s Armv8-A (64/32bit)</span></span><br><span class="line">get_source_code()&#123;</span><br><span class="line">    echo &quot;Getting source code...&quot;</span><br><span class="line">    TARGET=$&#123;commandline_args[1]&#125;.xml</span><br><span class="line">    BRANCH=$&#123;commandline_args[2]&#125;</span><br><span class="line">    cd ~ || exit 1</span><br><span class="line">    # repo sync not needed for the moment, might be useful later during the TA development</span><br><span class="line">    mkdir -p optee-project || exit 1</span><br><span class="line">    cd optee-project  || exit 1</span><br><span class="line">    repo init -u https://github.com/OP-TEE/manifest.git -m &quot;$TARGET&quot; -b &quot;$BRANCH&quot; || exit 1 # optee-project dir is still empty, just sets up a meta folder .repo that contains references to all subprojects</span><br><span class="line">    repo sync -j4 --no-clone-bundle || exit 1 # optee-project dir is not empty anylonger, actually downloads the git repositories mentioned in the repo manifest file</span><br><span class="line">    # your name: piachristel</span><br><span class="line">    # your email: muellerchristina@bluewin.ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get_toolchains()&#123;</span><br><span class="line">    echo &quot;Getting toolchains...&quot;</span><br><span class="line">    cd ~/optee-project/build || exit 1</span><br><span class="line">    make -j2 toolchains</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build_solution()&#123;</span><br><span class="line">    echo &quot;Building...&quot;</span><br><span class="line">    cd ~/optee-project/build || exit 1</span><br><span class="line">    make -j$(nproc) || exit 1 # nproc speeds up compilation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;Downloading and updating packages...&quot;</span><br><span class="line">sudo apt-get update -qq || exit 1</span><br><span class="line"></span><br><span class="line">commandline_args=(&quot;$@&quot;)</span><br><span class="line">&quot;$1&quot; # first argument is function to call</span><br><span class="line">exit 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="install-grpc-sh"><a href="#install-grpc-sh" class="headerlink" title="install-grpc.sh"></a>install-grpc.sh</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Script to cross-compile grpc</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bases on installation guidelines of:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://github.com/grpc/grpc/blob/master/BUILDING.md<span class="comment">#linux</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://github.com/grpc/grpc/blob/master/templates/Makefile.template</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://stackoverflow.com/questions/54052229/build-grpc-c-for-android-using-ndk-arm-linux-androideabi-clang-compiler</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://github.com/grpc/grpc/issues/9719<span class="comment">#issuecomment-284843131</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://www.mail-archive.com/grpc-io@googlegroups.com/msg04551.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://groups.google.com/forum/<span class="comment">#!topic/grpc-io/848KwP13fPc (recommends to compile the gRPC library statically)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://groups.google.com/forum/<span class="comment">#!topic/grpc-io/848KwP13fPc</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://github.com/grpc/grpc/issues/6756<span class="comment">#issuecomment-228479843</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Its divided <span class="keyword">in</span> the multiple sections.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Make script executable by running <span class="variable">$chmod</span> a+x install-grpc</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Each section can be called with <span class="built_in">source</span> `~/path/to/script/install-grpc sectionName`.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Due to dependencies the sections should be called <span class="keyword">in</span> the order below.</span></span><br><span class="line"></span><br><span class="line">prerequisites()&#123;</span><br><span class="line">    echo &quot;Installing prerequisites for grpc...&quot;</span><br><span class="line">    sudo apt-get update -q || exit 1</span><br><span class="line">    sudo apt-get install build-essential autoconf libtool pkg-config \</span><br><span class="line">        libgflags-dev libgtest-dev \</span><br><span class="line">        clang libc++-dev \</span><br><span class="line">        autoconf automake libtool curl make g++ unzip \</span><br><span class="line">        g++-aarch64-linux-gnu || exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clone_and_init()&#123;</span><br><span class="line">    echo &quot;Cloning grpc repo and init submodules...&quot;</span><br><span class="line">    # see https://github.com/grpc/grpc/blob/master/BUILDING.md#unix for latest stable release </span><br><span class="line">    # tag v1.20.0, commit 9dfbd34f5c0b20bd77658c73c59b9a3e4e8f4e14</span><br><span class="line">    git clone -b v1.20.0 https://github.com/grpc/grpc || exit 1 </span><br><span class="line">    cd ~/grpc || exit 1</span><br><span class="line">    git submodule update --init || exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_grpc_natively()&#123;</span><br><span class="line">    echo &quot;Install grpc and protobuf natively...&quot;</span><br><span class="line">    grpc_src=&#x27;/home/ubuntu/grpc&#x27; || exit 1</span><br><span class="line">    cd $grpc_src/third_party/protobuf || exit 1</span><br><span class="line">    ./autogen.sh || exit 1</span><br><span class="line">    ./configure || exit 1</span><br><span class="line">    make || exit 1</span><br><span class="line">    sudo make install || exit 1</span><br><span class="line">    sudo ldconfig || exit 1</span><br><span class="line">    cd $grpc_src || exit 1</span><br><span class="line">    make || exit 1</span><br><span class="line">    sudo make install || exit 1</span><br><span class="line">    sudo ldconfig || exit 1</span><br><span class="line">    make plugins || exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cross_compile_grpc()&#123;</span><br><span class="line">    echo &quot;Cross-compiling grpc as static library...&quot;</span><br><span class="line">    grpc_src=&#x27;/home/ubuntu/grpc&#x27; || exit 1</span><br><span class="line">    cd $grpc_src || exit 1</span><br><span class="line">    make clean || exit 1</span><br><span class="line">    export GRPC_CROSS_COMPILE=true || exit 1</span><br><span class="line">    export GRPC_CROSS_AROPTS=&quot;rc --target=elf32-little&quot; || exit 1</span><br><span class="line">    export HAS_PKG_CONFIG=false || exit 1</span><br><span class="line">    export CC=&quot;aarch64-linux-gnu-gcc&quot; || exit 1</span><br><span class="line">    export CXX=&quot;aarch64-linux-gnu-g++&quot; || exit 1</span><br><span class="line">    export RANLIB=&quot;aarch64-linux-gnu-gcc-ranlib&quot; || exit 1</span><br><span class="line">    export LD=&quot;aarch64-linux-gnu-gcc&quot; || exit 1</span><br><span class="line">    export LDXX=&quot;aarch64-linux-gnu-g++&quot; || exit 1</span><br><span class="line">    export AR=&quot;aarch64-linux-gnu-ar&quot; || exit 1</span><br><span class="line">    export HOST_CC=&quot;/usr/bin/gcc&quot; || exit 1</span><br><span class="line">    export HOST_CXX=&quot;/usr/bin/g++&quot; || exit 1</span><br><span class="line">    export HOST_LD=&quot;/usr/bin/ld&quot; || exit 1</span><br><span class="line">    export STRIP=&quot;aarch64-linux-gnu-strip&quot; || exit 1</span><br><span class="line">    export PROTOBUF_CONFIG_OPTS=&quot;--host=aarch64-linux-gnu --with-protoc=/usr/local/bin/protoc&quot; || exit 1</span><br><span class="line">    export GRPC_CROSS_LDOPTS=&quot;-L/usr/local/lib -L/usr/local/cross/lib&quot; || exit 1</span><br><span class="line">    make static </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">commandline_args=(&quot;$@&quot;)</span><br><span class="line">&quot;$1&quot; # first argument is function to call</span><br><span class="line">exit 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>fabric</tag>
        <tag>optee</tag>
      </tags>
  </entry>
</search>
